2616. Minimize the Maximum Difference of Pairs


Medium


12 Aug 2023



C++:

// Time Complexity : O(nlogn) where n is the size of the vector nums and space complexity is O(1)


class Solution {
public:
    bool ispos(vector<int>nums,int diff,int pairs){ // function to check if the difference is possible or not
       int i =1; // variable to store the index
        int n = nums.size(); // variable to store the size of the vector nums
        int k = 0; // variable to store the number of pairs

        for(i;i<n && k<pairs;i++){ // loop for i
            if(nums[i]-nums[i-1]<=diff){ // if the difference is less than or equal to diff
                k++; // increment the k
                i++; // increment the i
            }
        }

        if(k>=pairs){ // if k is greater than or equal to pairs
            return true; // return true
        }
        return false; // return false

    }

    int minimizeMax(vector<int>& nums, int p) {
        sort(nums.begin(),nums.end()); // sort the vector nums
        int n = nums.size(); // variable to store the size of the vector nums
        int left = 0; // variable to store the left
        int right = nums[n-1]-nums[0]; // variable to store the right

        while(left<=right){ // loop till left is less than or equal to right

            int mid = (left+right)/2; // variable to store the mid

            if(ispos(nums,mid,p)){ // if the difference is possible
                right = mid-1; // update the right
            }
            else{
                left = mid+1; // update the left
            }
        }
        return left; // return the left
    }
};



Java:


// Time Complexity : O(nlogn) where n is the size of the vector nums and space complexity is O(1)

class Solution {
    public boolean ispos(int[] nums,int diff,int pairs){ // function to check if the difference is possible or not
        int i =1; // variable to store the index
        int n = nums.length; // variable to store the size of the vector nums
        int k = 0; // variable to store the number of pairs

        for(i=1;i<n && k<pairs;i++){ // loop for i
            if(nums[i]-nums[i-1]<=diff){ // if the difference is less than or equal to diff
                k++; // increment the k
                i++; // increment the i
            }
        }

        if(k>=pairs){ // if k is greater than or equal to pairs
            return true; // return true
        }
        return false; // return false

    }

    public int minimizeMax(int[] nums, int p) {
        Arrays.sort(nums); // sort the vector nums
        int n = nums.length; // variable to store the size of the vector nums
        int left = 0; // variable to store the left
        int right = nums[n-1]-nums[0]; // variable to store the right

        while(left<=right){ // loop till left is less than or equal to right

            int mid = (left+right)/2; // variable to store the mid

            if(ispos(nums,mid,p)){ // if the difference is possible
                right = mid-1; // update the right
            }
            else{
                left = mid+1; // update the left
            }
        }
        return left; // return the left
    }
}




Python:

# Time Complexity : O(nlogn) where n is the size of the vector nums and space complexity is O(1)

class Solution:
    def ispos(self,nums,diff,pairs): # function to check if the difference is possible or not
        i = 1 # variable to store the index
        n = len(nums) # variable to store the size of the vector nums
        k = 0 # variable to store the number of pairs

        while i<n: # loop for i
            if nums[i]-nums[i-1]<=diff: # if the difference is less than or equal to diff
                k+=1 # increment the k
                i+=1 # increment the i
            
            if k>=pairs: # if k is greater than or equal to pairs
                return True # return true
            i+=1
        return False # return false

    def minimizeMax(self, nums, p):
        """
        :type nums: List[int]
        :type p: int
        :rtype: int
        """
        nums.sort() # sort the vector nums
        n = len(nums) # variable to store the size of the vector nums
        left = 0 # variable to store the left
        right =  nums[n-1]-nums[0] # variable to store the right

        while left<right: # loop till left is less than or equal to right

            mid = left+(right-left)//2 # variable to store the mid

            if self.ispos(nums,mid,p): # if the difference is possible
                right = mid # update the right
            else:
                left = mid+1 # update the left
        return left # return the left



Python3:

# Time Complexity : O(nlogn) where n is the size of the vector nums and space complexity is O(1)

class Solution:
    def ispos(self,nums,diff,pairs): # function to check if the difference is possible or not
        i = 1 # variable to store the index
        n = len(nums) # variable to store the size of the vector nums
        k = 0 # variable to store the number of pairs

        while i<n: # loop for i
            if nums[i]-nums[i-1]<=diff: # if the difference is less than or equal to diff
                k+=1 # increment the k
                i+=1 # increment the i
            
            if k>=pairs: # if k is greater than or equal to pairs
                return True # return true
            i+=1
        return False # return false

    def minimizeMax(self, nums: List[int], p: int) -> int: # add the missing colon after List[int]
        nums.sort() # sort the vector nums
        n = len(nums) # variable to store the size of the vector nums
        left = 0 # variable to store the left
        right =  nums[n-1]-nums[0] # variable to store the right

        while left<right: # loop till left is less than or equal to right

            mid = left+(right-left)//2 # variable to store the mid

            if self.ispos(nums,mid,p): # if the difference is possible
                right = mid # update the right
            else:
                left = mid+1 # update the left
        return left # return the left



C:



C#:



JavaScript:


Swift:


Dart:
