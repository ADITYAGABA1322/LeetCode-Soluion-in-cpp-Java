2389. Longest Subsequence With Limited Sum


3 March 2023


Easy


C++:


// Time Complexity : O(n) where n is the length of the array and space complexity is O(1)



class Solution {
public:
    vector<int> answerQueries(vector<int>& nums, vector<int>& queries) {
      sort(nums.begin(), nums.end()); 
        vector<int> res;
        for(int i = 0; i < queries.size(); i++){
            int sum = 0;
            int count = 0;
            for(int j = 0; j < nums.size(); j++){
                if(sum + nums[j] <= queries[i]){
                    sum += nums[j];
                    count++;
                }
            }
            res.push_back(count);
        }

        return res;
    }
};


2nd Method 

class Solution {
public:
    vector<int> answerQueries(vector<int>& nums, vector<int>& queries) {
        // Sort 'nums'
        sort(nums.begin(), nums.end());
        
        // For each query, collect numbers from lowest to highest.
        // If their sum exceeds the limit 'query', move on to the next query.
        vector<int> ans;
        for (auto query : queries) {
            int count = 0;
            for (auto num : nums) {
                if (query >= num) {
                    query -= num;
                    count++;
                }
                else {
                    break;
                }
            }
            ans.push_back(count);
        }
        
        return ans;
    }
};






Java:



// Time Complexity : O(n) where n is the length of the array and space complexity is O(1)



class Solution {
    public int[] answerQueries(int[] nums, int[] queries) {
        // Sort 'nums'
        Arrays.sort(nums);
        int n = nums.length, m = queries.length;
        int answer[] = new int[m];
        
        // For each query, collect numbers from lowest to highest.
        // If their sum exceeds the limit 'query', move on to the next query.
        for (int i = 0; i < m; ++i) {
            int count = 0;
            int query = queries[i];
            for (int num : nums) {
                if (query >= num) {
                    count++;
                    query -= num;
                }
                else
                    break;
            }
            answer[i] = count;
        }
        return answer;
    }
}

