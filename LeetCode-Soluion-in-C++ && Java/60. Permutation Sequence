60. Permutation Sequence


6 Aug 2023


Hard



C++:

// Time Complexity : O(n) where n is the size of the string s and space complexity is O(1)

class Solution {
public:
    string getPermutation(int n, int k) {
        string s = ""; // string to store the result
        vector<int> nums; // vector to store the numbers
        int fact = 1; // variable to store the factorial
        for(int i=1; i<=n; i++){ // loop for i
            fact *= i; // update the factorial
            nums.push_back(i); // push the number in the vector nums
        }
        for(int i=0, l=k-1; i<n; i++){ // loop for i
            fact /= n-i; // update the factorial
            int index = (l/fact); // variable to store the index
            s += to_string(nums[index]); // update the string
            nums.erase(nums.begin()+index); // erase the number from the vector nums
            l -= index*fact; // update the l
        }
        return s; // return the string
        
    }
};

2nd Method

// Time Complexity : O(n) where n is the size of the string s and space complexity is O(1)

#include <algorithm>
#include <string>

class Solution {
public:
    string getPermutation(int n, int k) {
        string s = "";
        for (int i = 1; i <= n; i++) {
            s += to_string(i);
        }
        while (--k) {
            std::next_permutation(s.begin(), s.end());
        }
        return s;
    }
};


3rd Method 

// Time Complexity : O(n) where n is the size of the string s and space complexity is O(1)

class Solution {
public:
    string getPermutation(int n, int k) {
        string s = ""; // string to store the result
        vector<int> fact(n); // vector to store the factorial
        vector<int> nums(n); // vector to store the numbers
        fact[0] = 1; // initialize the factorial
        for(int i=1; i<n; i++){ // loop for i
            fact[i] = fact[i-1]*i; // update the factorial
        }
        for(int i=1; i<=n; i++){ // loop for i
            nums[i-1] = i; // update the numbers
        }
        k--; // decrement the k
        for(int i=1; i<=n; i++){ // loop for i
            int index = k/fact[n-i]; // index is the index of the number
            s += to_string(nums[index]); // update the string
            nums.erase(nums.begin()+index); // erase the number
            k -= index*fact[n-i]; // update the k
        }
        return s; // return the string
    }
};




Java:

// Time Complexity : O(n) where n is the size of the string s and space complexity is O(1)

class Solution {
    public String getPermutation(int n, int k) {
        String s = ""; // string to store the result
        List<Integer> nums = new ArrayList<>(); // vector to store the numbers
        int fact = 1; // variable to store the factorial
        for(int i=1; i<=n; i++){ // loop for i
            fact *= i; // update the factorial
            nums.add(i); // push the number in the vector nums
        }
        for(int i=0, l=k-1; i<n; i++){ // loop for i
            fact /= n-i; // update the factorial
            int index = (l/fact); // variable to store the index
            s += nums.get(index); // update the string
            nums.remove(index); // erase the number from the vector nums
            l -= index*fact; // update the l
        }
        return s; // return the string
    }
}


Python:

// Time Complexity : O(n) where n is the size of the string s and space complexity is O(1)

class Solution(object):
    def getPermutation(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: str
        """ 
        s = ""  # string to store the result
        nums = [i for i in range(1, n+1)]  # vector to store the numbers
        fact = 1  # variable to store the factorial
        for i in range(1, n+1):  # loop for i
            fact *= i  # update the factorial
        k-=1  # decrement the k
        for i in range(n):  # loop for i
            fact /= n-i  # update the factorial
            index = (k/fact)  # variable to store the index
            s += str(nums[index])  # update the string
            nums.remove(nums[index])  # erase the number from the vector nums
            k -= index*fact  # update the k
        return s  # return the string


Python3:

// Time Complexity : O(n) where n is the size of the string s and space complexity is O(1)

class Solution:
    def getPermutation(self, n: int, k: int -> str:  // add the missing bracket after int
        s = ""  # string to store the result
        nums = [i for i in range(1, n+1)]  # vector to store the numbers
        fact = 1  # variable to store the factorial
        for i in range(1, n+1):  # loop for i
            fact *= i  # update the factorial
        k-=1 # decrement the k
        for i in range(n):  # loop for i
            fact /= n-i  # update the factorial
            index = int(k/fact)  # variable to store the index
            s += str(nums[index])  # update the string
            nums.remove(nums[index])  # erase the number from the vector nums
            k -= index*fact  # update the k
        return s  # return the string

C:


// Time Complexity : O(n) where n is the size of the string s and space complexity is O(1)

char * getPermutation(int n, int k){
    char *s = (char*)malloc(sizeof(char)*n);  // string to store the result
    int *nums = (int*)malloc(sizeof(int)*n);  // vector to store the numbers
    int fact = 1;  // variable to store the factorial
    for(int i=1; i<=n; i++){  // loop for i
        fact *= i;  // update the factorial
        nums[i-1] = i;  // update the numbers
    }
    for(int i=0, l=k-1; i<n; i++){  // loop for i
        fact /= n-i;  // update the factorial
        int index = (l/fact);  // variable to store the index
        s[i] = nums[index]+'0';  // update the string
        for(int j=index; j<n-i-1; j++){  // loop for j
            nums[j] = nums[j+1];  // update the numbers
        }
        l -= index*fact;  // update the l
    }
    return s;  // return the string
}



C#:

// Time Complexity : O(n) where n is the size of the string s and space complexity is O(1)

public class Solution {
    public string GetPermutation(int n, int k) {
        string s = "";  // string to store the result
        List<int> nums = new List<int>();  // vector to store the numbers
        int fact = 1;  // variable to store the factorial
        for(int i=1; i<=n; i++){  // loop for i
            fact *= i;  // update the factorial
            nums.Add(i);  // push the number in the vector nums
        }
        for(int i=0, l=k-1; i<n; i++){  // loop for i
            fact /= n-i;  // update the factorial
            int index = (l/fact);  // variable to store the index
            s += nums[index];  // update the string
            nums.RemoveAt(index);  // erase the number from the vector nums
            l -= index*fact;  // update the l
        }
        return s;  // return the string
    }
}


JavaScript:

// Time Complexity : O(n) where n is the size of the string s and space complexity is O(1)

var getPermutation = function(n, k) {
    let s = "";  // string to store the result
    let nums = [];  // vector to store the numbers
    let fact = 1;  // variable to store the factorial
    for(let i=1; i<=n; i++){  // loop for i
        fact *= i;  // update the factorial
        nums.push(i);  // push the number in the vector nums
    }
    for(let i=0, l=k-1; i<n; i++){  // loop for i
        fact /= n-i;  // update the factorial
        let index = Math.floor(l/fact);  // variable to store the index
        s += nums[index];  // update the string
        nums.splice(index, 1);  // erase the number from the vector nums
        l -= index*fact;  // update the l
    }
    return s;  // return the string
};


Swift:
