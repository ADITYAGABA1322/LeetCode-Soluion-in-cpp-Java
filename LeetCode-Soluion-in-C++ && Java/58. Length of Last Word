58. Length of Last Word


4 Aug 2023


Easy:



C++:

// Time Complexity : O(n) where n is the size of the string s and space complexity is O(1)

class Solution {
public:
    int lengthOfLastWord(string s) {
        int n = s.size(); // n is the size of the string s
        int count = 0; // count is the length of the last word
        for(int i=n-1; i>=0; i--){ // loop for i
            if(s[i] == ' ' && count > 0) break; // if the character is space and count is greater than 0
            else if(s[i] != ' ') count++; // else if the character is not space
        }
        return count; // return the count
    }
};



Java:


// Time Complexity : O(n) where n is the size of the string s and space complexity is O(1)

class Solution {
    public int lengthOfLastWord(String s) {
        int n = s.length(); // n is the size of the string s
        int count = 0; // count is the length of the last word
        for(int i=n-1; i>=0; i--){ // loop for i
            if(s.charAt(i) == ' ' && count > 0) break; // if the character is space and count is greater than 0
            else if(s.charAt(i) != ' ') count++; // else if the character is not space
        }
        return count; // return the count
    }
}


Python:

// Time Complexity : O(n) where n is the size of the string s and space complexity is O(1)

class Solution(object):
    def lengthOfLastWord(self, s):
        """
        :type s: str
        :rtype: int
        """ 
        n = len(s)  # n is the size of the string s
        count = 0  # count is the length of the last word
        for i in range(n-1, -1, -1):  # loop for i
            if s[i] == ' ' and count > 0:  # if the character is space and count is greater than 0
                break  # break
            elif s[i] != ' ':  # else if the character is not space
                count += 1  # increment the count
        return count  # return the count



Python3:

// Time Complexity : O(n) where n is the size of the string s and space complexity is O(1)

class Solution:
    def lengthOfLastWord(self, s: str) -> int:  // add the missing colon after str
        n = len(s)  # n is the size of the string s
        count = 0  # count is the length of the last word
        for i in range(n-1, -1, -1):  # loop for i
            if s[i] == ' ' and count > 0:  # if the character is space and count is greater than 0
                break  # break
            elif s[i] != ' ':  # else if the character is not space
                count += 1  # increment the count
        return count  # return the count



C:

// Time Complexity : O(n) where n is the size of the string s and space complexity is O(1)

int lengthOfLastWord(char * s){
    int n = strlen(s);  // n is the size of the string s
    int count = 0;  // count is the length of the last word
    for(int i=n-1; i>=0; i--){  // loop for i
        if(s[i] == ' ' && count > 0) break;  // if the character is space and count is greater than 0
        else if(s[i] != ' ') count++;  // else if the character is not space
    }
    return count;  // return the count
}



C#:

// Time Complexity : O(n) where n is the size of the string s and space complexity is O(1)

public class Solution {
    public int LengthOfLastWord(string s) {
        int n = s.Length;  // n is the size of the string s
        int count = 0;  // count is the length of the last word
        for(int i=n-1; i>=0; i--){  // loop for i
            if(s[i] == ' ' && count > 0) break;  // if the character is space and count is greater than 0
            else if(s[i] != ' ') count++;  // else if the character is not space
        }
        return count;  // return the count
    }
}



JavaScript:


// Time Complexity : O(n) where n is the size of the string s and space complexity is O(1)

var lengthOfLastWord = function(s) {
    let n = s.length;  // n is the size of the string s
    let count = 0;  // count is the length of the last word
    for(let i=n-1; i>=0; i--){  // loop for i
        if(s[i] == ' ' && count > 0) break;  // if the character is space and count is greater than 0
        else if(s[i] != ' ') count++;  // else if the character is not space
    }
    return count;  // return the count
};


Swift:

// Time Complexity : O(n) where n is the size of the string s and space complexity is O(1)

class Solution {
    func lengthOfLastWord(_ s: String) -> Int {
        let n = s.count;  // n is the size of the string s
        var count = 0;  // count is the length of the last word
        for i in stride(from: n-1, through: 0, by: -1){  // loop for i
            if s[s.index(s.startIndex, offsetBy: i)] == " " && count > 0{  // if the character is space and count is greater than 0
                break;  // break
            }
            else if s[s.index(s.startIndex, offsetBy: i)] != " "{  // else if the character is not space
                count += 1;  // increment the count
            }
        }
        return count;  // return the count
    }
}

2nd Method

// Time Complexity : O(n) where n is the size of the string s and space complexity is O(1)

class Solution {
    func lengthOfLastWord(_ s: String) -> Int {
        guard let word = s.split(separator: " ").last else { return 0 }
        return word.count
    }
}

3rd Method

// Time Complexity : O(n) where n is the size of the string s and space complexity is O(1)

class Solution {
    func lengthOfLastWord(_ s: String) -> Int {
        var count = 0
        for char in s.reversed() {
            if char == " " && count > 0 {
                break
            } else if char != " " {
                count += 1
            }
        }
        return count
    }
}


