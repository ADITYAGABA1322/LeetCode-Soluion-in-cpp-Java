54. Spiral Matrix


6 March 2023




Medium



C++:




// Time Complexity : O(m * n) where m is the number of rows and n is the number of columns and space complexity is O(1)



class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> result;  // vector to store the result
        if(matrix.size() == 0){  // if the matrix is empty
            return result;  // return the result
        }
        int m = matrix.size();  // variable to store the number of rows
        int n = matrix[0].size();  // variable to store the number of columns
        int top = 0;  // variable to store the top row
        int bottom = m - 1;  // variable to store the bottom row
        int left = 0;  // variable to store the left column
        int right = n - 1;  // variable to store the right column
        while(top <= bottom && left <= right){  // iterate until the top row is less than or equal to the bottom row and the left column is less than or equal to the right column
            for(int i = left; i <= right; i++){  // iterate through the top row
                result.push_back(matrix[top][i]);  // push the element to the result
            }
            top++;  // increment the top row
            for(int i = top; i <= bottom; i++){  // iterate through the right column
                result.push_back(matrix[i][right]);  // push the element to the result
            }
            right--;  // decrement the right column
            if(top <= bottom){  // if the top row is less than or equal to the bottom row
                for(int i = right; i >= left; i--){  // iterate through the bottom row
                    result.push_back(matrix[bottom][i]);  // push the element to the result
                }
                bottom--;  // decrement the bottom row
            }
            if(left <= right){  // if the left column is less than or equal to the right column
                for(int i = bottom; i >= top; i--){  // iterate through the left column
                    result.push_back(matrix[i][left]);  // push the element to the result
                }
                left++;  // increment the left column
            }
        }
        return result;  // return the result
    }
};

Java:


// Time Complexity : O(m * n) where m is the number of rows and n is the number of columns and space complexity is O(1)



class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> result = new ArrayList<>();  // list to store the result
        if(matrix.length == 0){  // if the matrix is empty
            return result;  // return the result
        }
        int m = matrix.length;  // variable to store the number of rows
        int n = matrix[0].length;  // variable to store the number of columns
        int top = 0;  // variable to store the top row
        int bottom = m - 1;  // variable to store the bottom row
        int left = 0;  // variable to store the left column
        int right = n - 1;  // variable to store the right column
        while(top <= bottom && left <= right){  // iterate until the top row is less than or equal to the bottom row and the left column is less than or equal to the right column
            for(int i = left; i <= right; i++){  // iterate through the top row
                result.add(matrix[top][i]);  // add the element to the result
            }
            top++;  // increment the top row
            for(int i = top; i <= bottom; i++){  // iterate through the right column
                result.add(matrix[i][right]);  // add the element to the result
            }
            right--;  // decrement the right column
            if(top <= bottom){  // if the top row is less than or equal to the bottom row
                for(int i = right; i >= left; i--){  // iterate through the bottom row
                    result.add(matrix[bottom][i]);  // add the element to the result
                }
                bottom--;  // decrement the bottom row
            }
            if(left <= right){  // if the left column is less than or equal to the right column
                for(int i = bottom; i >= top; i--){  // iterate through the left column
                    result.add(matrix[i][left]);  // add the element to the result
                }
                left++;  // increment the left column
            }
        }
        return result;  // return the result
    }
}

Python:

class Solution(object):
    def spiralOrder(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[int]
        """ 
        result = []  # list to store the result
        if len(matrix) == 0:  # if the matrix is empty
            return result  # return the result
        m = len(matrix)  # variable to store the number of rows
        n = len(matrix[0])  # variable to store the number of columns
        top = 0  # variable to store the top row
        bottom = m - 1  # variable to store the bottom row
        left = 0  # variable to store the left column
        right = n - 1  # variable to store the right column
        while top <= bottom and left <= right:  # iterate until the top row is less than or equal to the bottom row and the left column is less than or equal to the right column
            for i in range(left, right + 1):  # iterate through the top row
                result.append(matrix[top][i])  # append the element to the result
            top += 1  # increment the top row
            for i in range(top, bottom + 1):  # iterate through the right column
                result.append(matrix[i][right])  # append the element to the result
            right -= 1  # decrement the right column
            if top <= bottom:  # if the top row is less than or equal to the bottom row
                for i in range(right, left - 1, -1):  # iterate through the bottom row
                    result.append(matrix[bottom][i])  # append the element to the result
                bottom -= 1  # decrement the bottom row
            if left <= right:  # if the left column is less than or equal to the right column
                for i in range(bottom, top - 1, -1):  # iterate through the left column
                    result.append(matrix[i][left])  # append the element to the result
                left += 1  # increment the left column
        return result  # return the result


Python3:

// Time Complexity : O(m * n) where m is the number of rows and n is the number of columns and space complexity is O(1)

class Solution:
    def spiralOrder(self, matrix: List[List[int]) -> List[int]:  // add the missing bracket after List[int] and add the missing colon after List[int] and add the missing colon after List[int]
        result = []  # list to store the result
        if len(matrix) == 0:  # if the matrix is empty
            return result  # return the result
        m = len(matrix)  # variable to store the number of rows
        n = len(matrix[0])  # variable to store the number of columns
        top = 0  # variable to store the top row
        bottom = m - 1  # variable to store the bottom row
        left = 0  # variable to store the left column
        right = n - 1  # variable to store the right column
        while top <= bottom and left <= right:  # iterate until the top row is less than or equal to the bottom row and the left column is less than or equal to the right column
            for i in range(left, right + 1):  # iterate through the top row
                result.append(matrix[top][i])  # append the element to the result
            top += 1  # increment the top row
            for i in range(top, bottom + 1):  # iterate through the right column
                result.append(matrix[i][right])  # append the element to the result
            right -= 1  # decrement the right column
            if top <= bottom:  # if the top row is less than or equal to the bottom row
                for i in range(right, left - 1, -1):  # iterate through the bottom row
                    result.append(matrix[bottom][i])  # append the element to the result
                bottom -= 1  # decrement the bottom row
            if left <= right:  # if the left column is less than or equal to the right column
                for i in range(bottom, top - 1, -1):  # iterate through the left column
                    result.append(matrix[i][left])  # append the element to the result
                left += 1  # increment the left column
        return result  # return the result

C:

// Time Complexity : O(m * n) where m is the number of rows and n is the number of columns and space complexity is O(1)

int* spiralOrder(int** matrix, int matrixSize, int* matrixColSize, int* returnSize){
    int* result = (int*)malloc(sizeof(int) * matrixSize * matrixColSize[0]);  // vector to store the result
    *returnSize = 0;  // variable to store the size of the result
    if(matrixSize == 0){  // if the matrix is empty
        return result;  // return the result
    }
    int m = matrixSize;  // variable to store the number of rows
    int n = matrixColSize[0];  // variable to store the number of columns
    int top = 0;  // variable to store the top row
    int bottom = m - 1;  // variable to store the bottom row
    int left = 0;  // variable to store the left column
    int right = n - 1;  // variable to store the right column
    while(top <= bottom && left <= right){  // iterate until the top row is less than or equal to the bottom row and the left column is less than or equal to the right column
        for(int i = left; i <= right; i++){  // iterate through the top row
            result[(*returnSize)++] = matrix[top][i];  // push the element to the result
        }
        top++;  // increment the top row
        for(int i = top; i <= bottom; i++){  // iterate through the right column
            result[(*returnSize)++] = matrix[i][right];  // push the element to the result
        }
        right--;  // decrement the right column
        if(top <= bottom){  // if the top row is less than or equal to the bottom row
            for(int i = right; i >= left; i--){  // iterate through the bottom row
                result[(*returnSize)++] = matrix[bottom][i];  // push the element to the result
            }
            bottom--;  // decrement the bottom row
        }
        if(left <= right){  // if the left column is less than or equal to the right column
            for(int i = bottom; i >= top; i--){  // iterate through the left column
                result[(*returnSize)++] = matrix[i][left];  // push the element to the result
            }
            left++;  // increment the left column
        }
    }
    return result;  // return the result
}

C#:

// Time Complexity : O(m * n) where m is the number of rows and n is the number of columns and space complexity is O(1)

public class Solution {
    public IList<int> SpiralOrder(int[][] matrix) {
        IList<int> result = new List<int>();  // list to store the result
        if(matrix.Length == 0){  // if the matrix is empty
            return result;  // return the result
        }
        int m = matrix.Length;  // variable to store the number of rows
        int n = matrix[0].Length;  // variable to store the number of columns
        int top = 0;  // variable to store the top row
        int bottom = m - 1;  // variable to store the bottom row
        int left = 0;  // variable to store the left column
        int right = n - 1;  // variable to store the right column
        while(top <= bottom && left <= right){  // iterate until the top row is less than or equal to the bottom row and the left column is less than or equal to the right column
            for(int i = left; i <= right; i++){  // iterate through the top row
                result.Add(matrix[top][i]);  // add the element to the result
            }
            top++;  // increment the top row
            for(int i = top; i <= bottom; i++){  // iterate through the right column
                result.Add(matrix[i][right]);  // add the element to the result
            }
            right--;  // decrement the right column
            if(top <= bottom){  // if the top row is less than or equal to the bottom row
                for(int i = right; i >= left; i--){  // iterate through the bottom row
                    result.Add(matrix[bottom][i]);  // add the element to the result
                }
                bottom--;  // decrement the bottom row
            }
            if(left <= right){  // if the left column is less than or equal to the right column
                for(int i = bottom; i >= top; i--){  // iterate through the left column
                    result.Add(matrix[i][left]);  // add the element to the result
                }
                left++;  // increment the left column
            }
        }
        return result;  // return the result
    }
}


JavaScript:

// Time Complexity : O(m * n) where m is the number of rows and n is the number of columns and space complexity is O(1)

var spiralOrder = function(matrix) {
    let result = [];  // list to store the result
    if(matrix.length == 0){  // if the matrix is empty
        return result;  // return the result
    }
    let m = matrix.length;  // variable to store the number of rows
    let n = matrix[0].length;  // variable to store the number of columns
    let top = 0;  // variable to store the top row
    let bottom = m - 1;  // variable to store the bottom row
    let left = 0;  // variable to store the left column
    let right = n - 1;  // variable to store the right column
    while(top <= bottom && left <= right){  // iterate until the top row is less than or equal to the bottom row and the left column is less than or equal to the right column
        for(let i = left; i <= right; i++){  // iterate through the top row
            result.push(matrix[top][i]);  // push the element to the result
        }
        top++;  // increment the top row
        for(let i = top; i <= bottom; i++){  // iterate through the right column
            result.push(matrix[i][right]);  // push the element to the result
        }
        right--;  // decrement the right column
        if(top <= bottom){  // if the top row is less than or equal to the bottom row
            for(let i = right; i >= left; i--){  // iterate through the bottom row
                result.push(matrix[bottom][i]);  // push the element to the result
            }
            bottom--;  // decrement the bottom row
        }
        if(left <= right){  // if the left column is less than or equal to the right column
            for(let i = bottom; i >= top; i--){  // iterate through the left column
                result.push(matrix[i][left]);  // push the element to the result
            }
            left++;  // increment the left column
        }
    }
    return result;  // return the result
};


Swift:




