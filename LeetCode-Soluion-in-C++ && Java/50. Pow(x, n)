50. Pow(x, n)



28 July 2023


Medium



C++:


// Time Complexity : O(logn) where n is the value of the variable n and space complexity is O(1)

class Solution {
public:
    double myPow(double x, int n) {
        double res = 1.0;  // variable to store the result
        long long int temp = n;  // variable to store the temporary result
        if(temp < 0){  // if the value of the variable temp is less than 0
            temp = -1 * temp;  // update the value of the variable temp
        }
        while(temp > 0){  // iterate until the value of the variable temp is greater than 0
            if(temp % 2 == 0){  // if the value of the variable temp is even
                x = x * x;  // update the value of the variable x
                temp = temp / 2;  // update the value of the variable temp
            }
            else{  // if the value of the variable temp is odd
                res = res * x;  // update the value of the variable res
                temp = temp - 1;  // update the value of the variable temp
            }
        }
        if(n < 0){  // if the value of the variable n is less than 0
            res = (double)(1.0) / (double)(res);  // update the value of the variable res
        }
        return res;  // return the result
    }
};

2nd Method 

class Solution {
public:
    double myPow(double x, int n) {
         return pow(x,n);
    }
};


Java:

// Time Complexity : O(logn) where n is the value of the variable n and space complexity is O(1)

class Solution {
    public double myPow(double x, int n) {
        double res = 1.0;  // variable to store the result
        long temp = n;  // variable to store the temporary result
        if(temp < 0){  // if the value of the variable temp is less than 0
            temp = -1 * temp;  // update the value of the variable temp
        }
        while(temp > 0){  // iterate until the value of the variable temp is greater than 0
            if(temp % 2 == 0){  // if the value of the variable temp is even
                x = x * x;  // update the value of the variable x
                temp = temp / 2;  // update the value of the variable temp
            }
            else{  // if the value of the variable temp is odd
                res = res * x;  // update the value of the variable res
                temp = temp - 1;  // update the value of the variable temp
            }
        }
        if(n < 0){  // if the value of the variable n is less than 0
            res = (double)(1.0) / (double)(res);  // update the value of the variable res
        }
        return res;  // return the result
    }
}

2nd Metthod

class Solution {
    public double myPow(double x, int n) {
        return Math.pow(x,n);
    }
}


Python:


// Time Complexity : O(logn) where n is the value of the variable n and space complexity is O(1)

class Solution(object):
    def myPow(self, x, n):
        """
        :type x: float
        :type n: int
        :rtype: float
        """ 
        res = 1.0  # variable to store the result
        temp = n  # variable to store the temporary result
        if temp < 0:  # if the value of the variable temp is less than 0
            temp = -1 * temp  # update the value of the variable temp
        while temp > 0:  # iterate until the value of the variable temp is greater than 0
            if temp % 2 == 0:  # if the value of the variable temp is even
                x = x * x  # update the value of the variable x
                temp = temp / 2  # update the value of the variable temp
            else:  # if the value of the variable temp is odd
                res = res * x  # update the value of the variable res
                temp = temp - 1  # update the value of the variable temp
        if n < 0:  # if the value of the variable n is less than 0
            res = (float)(1.0) / (float)(res)  # update the value of the variable res
        return res  # return the result

2nd Method 

class Solution(object):
    def myPow(self, x, n):
        """
        :type x: float
        :type n: int
        :rtype: float
        """ 
        return x ** n


Python3:

// Time Complexity : O(logn) where n is the value of the variable n and space complexity is O(1)

class Solution:
    def myPow(self, x: float, n: int) -> float:
        res = 1.0  # variable to store the result
        temp = n  # variable to store the temporary result
        if temp < 0:  # if the value of the variable temp is less than 0
            temp = -1 * temp  # update the value of the variable temp
        while temp > 0:  # iterate until the value of the variable temp is greater than 0
            if temp % 2 == 0:  # if the value of the variable temp is even
                x = x * x  # update the value of the variable x
                temp = temp / 2  # update the value of the variable temp
            else:  # if the value of the variable temp is odd
                res = res * x  # update the value of the variable res
                temp = temp - 1  # update the value of the variable temp
        if n < 0:  # if the value of the variable n is less than 0
            res = (float)(1.0) / (float)(res)  # update the value of the variable res
        return res  # return the result


2nd Method 

class Solution:
    def myPow(self, x: float, n: int) -> float:
        return x ** n


C:

// Time Complexity : O(logn) where n is the value of the variable n and space complexity is O(1)

double myPow(double x, int n){
    double res = 1.0;  // variable to store the result
    long long int temp = n;  // variable to store the temporary result
    if(temp < 0){  // if the value of the variable temp is less than 0
        temp = -1 * temp;  // update the value of the variable temp
    }
    while(temp > 0){  // iterate until the value of the variable temp is greater than 0
        if(temp % 2 == 0){  // if the value of the variable temp is even
            x = x * x;  // update the value of the variable x
            temp = temp / 2;  // update the value of the variable temp
        }
        else{  // if the value of the variable temp is odd
            res = res * x;  // update the value of the variable res
            temp = temp - 1;  // update the value of the variable temp
        }
    }
    if(n < 0){  // if the value of the variable n is less than 0
        res = (double)(1.0) / (double)(res);  // update the value of the variable res
    }
    return res;  // return the result
}

2nd Method

double myPow(double x, int n){
    return pow(x, n);
}



C#:

// Time Complexity : O(logn) where n is the value of the variable n and space complexity is O(1)

public class Solution {
    public double MyPow(double x, int n) {
        double res = 1.0;  // variable to store the result
        long temp = n;  // variable to store the temporary result
        if(temp < 0){  // if the value of the variable temp is less than 0
            temp = -1 * temp;  // update the value of the variable temp
        }
        while(temp > 0){  // iterate until the value of the variable temp is greater than 0
            if(temp % 2 == 0){  // if the value of the variable temp is even
                x = x * x;  // update the value of the variable x
                temp = temp / 2;  // update the value of the variable temp
            }
            else{  // if the value of the variable temp is odd
                res = res * x;  // update the value of the variable res
                temp = temp - 1;  // update the value of the variable temp
            }
        }
        if(n < 0){  // if the value of the variable n is less than 0
            res = (double)(1.0) / (double)(res);  // update the value of the variable res
        }
        return res;  // return the result
    }
}


2nd Method

public class Solution {
    public double MyPow(double x, int n) {
        return Math.Pow(x, n);
    }
}


JavaScript:

// Time Complexity : O(logn) where n is the value of the variable n and space complexity is O(1)

var myPow = function(x, n) {
    let res = 1.0;  // variable to store the result
    let temp = n;  // variable to store the temporary result
    if(temp < 0){  // if the value of the variable temp is less than 0
        temp = -1 * temp;  // update the value of the variable temp
    }
    while(temp > 0){  // iterate until the value of the variable temp is greater than 0
        if(temp % 2 == 0){  // if the value of the variable temp is even
            x = x * x;  // update the value of the variable x
            temp = temp / 2;  // update the value of the variable temp
        }
        else{  // if the value of the variable temp is odd
            res = res * x;  // update the value of the variable res
            temp = temp - 1;  // update the value of the variable temp
        }
    }
    if(n < 0){  // if the value of the variable n is less than 0
        res = (float)(1.0) / (float)(res);  // update the value of the variable res
    }
    return res;  // return the result
};

2nd Method

var myPow = function(x, n) {
    return Math.pow(x, n);
};




Swift:


// Time Complexity : O(logn) where n is the value of the variable n and space complexity is O(1)


class Solution {
    func myPow(_ x: Double, _ n: Int) -> Double {
        var res = 1.0
        var temp = n

        if temp < 0 {
            temp = -temp
            // If the exponent is negative, we take the reciprocal of the base
            // instead of using the absolute value of 'n'.
            return 1.0 / powHelper(x, temp)
        }

        return powHelper(x, temp)
    }

    private func powHelper(_ x: Double, _ n: Int) -> Double {
        if n == 0 {
            return 1.0
        }

        let half = powHelper(x, n / 2)

        if n % 2 == 0 {
            return half * half
        } else {
            return half * half * x
        }
    }
}



2nd Method 



class Solution {
    func myPow(_ x: Double, _ n: Int) -> Double {
         pow(x, Double(n))
    }
}



