17. Letter Combinations of a Phone Number




12 July 2023



Medium



C++:



// Time Complexity : O(4^n) where n is the length of the string and space complexity is O(n)







class Solution {
public:
    vector<string> letterCombinations(string digits) {
        vector<string> result;  // vector to store the result
        if(digits.length() == 0) return result;  // return the result if the length of the string is 0
        vector<string> mapping = {"0", "1", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};  // vector to store the mapping
        result.push_back("");  // push the empty string to the result
        for(int i = 0; i < digits.length(); i++){  // iterate through the string
            vector<string> temp;  // vector to store the temporary result
            string chars = mapping[digits[i] - '0'];  // variable to store the characters
            for(int j = 0; j < chars.length(); j++){  // iterate through the characters
                for(int k = 0; k < result.size(); k++){  // iterate through the result
                    temp.push_back(result[k] + chars[j]);  // push the characters to the temporary result
                }
            }
            result = temp;  // update the result
        }
        return result;  // return the result
    }
};


Java:




// Time Complexity : O(4^n) where n is the length of the string and space complexity is O(n)







class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> result = new ArrayList<>();  // list to store the result
        if(digits.length() == 0) return result;  // return the result if the length of the string is 0
        String[] mapping = {"0", "1", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv","wxyz"};  // array to store the mapping
        result.add("");  // add the empty string to the result
        for(int i = 0; i < digits.length(); i++){  // iterate through the string
            List<String> temp = new ArrayList<>();  // list to store the temporary result
            String chars = mapping[digits.charAt(i) - '0'];  // variable to store the characters
            for(int j = 0; j < chars.length(); j++){  // iterate through the characters
                for(int k = 0; k < result.size(); k++){  // iterate through the result
                    temp.add(result.get(k) + chars.charAt(j));  // add the characters to the temporary result
                }
            }
            result = temp;  // update the result
        }
        return result;  // return the result
    }
}
