5. Longest Palindromic Substring



7 March 2023



Medium



2 Methods


C++:



// Time Complexity : O(n^2) where n is the length of the string and space complexity is O(n^2)



class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.length();  // variable to store the length of the string
        vector<vector<bool>> dp(n, vector<bool>(n, false));  // 2d vector to store the dp values
        int start = 0;  // variable to store the start index of the longest palindrome
        int end = 0;  // variable to store the end index of the longest palindrome
        for(int i = 0; i < n; i++){  // iterate through the string
            dp[i][i] = true;  // update the dp value at the current index to true
            if(i < n - 1 && s[i] == s[i + 1]){  // if the current index is less than the length of the string - 1 and the current character is equal to the next character
                dp[i][i + 1] = true;  // update the dp value at the current index and the next index to true
                start = i;  // update the start index to the current index
                end = i + 1;  // update the end index to the next index
            }
        }
        for(int i = n - 1; i >= 0; i--){  // iterate through the string from the end
            for(int j = i + 2; j < n; j++){  // iterate through the string from the current index + 2
                if(s[i] == s[j] && dp[i + 1][j - 1]){  // if the current character is equal to the character at the current index + 2 and the dp value at the current index + 1 and the current index - 1 is true
                    dp[i][j] = true;  // update the dp value at the current index and the current index + 2 to true
                    if(j - i > end - start){  // if the difference between the current index and the current index + 2 is greater than the difference between the end index and the start index
                        start = i;  // update the start index to the current index
                        end = j;  // update the end index to the current index + 2
                    }
                }
            }
        }
        return s.substr(start, end - start + 1);  // return the substring from the start index to the end index
    }
};

2nd Method  

class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size();

        if (n == 1) { return s; }

        int longestSubstringLength = 1, longestSubstringLengthStartIndex = 0, start, mid = 0, end;

        while (mid + (longestSubstringLength / 2) < n) {
            start = mid;
            end = mid;

            while (s[mid] == s[end + 1]) {
                ++end;
            }

            mid = end + 1;
            while (start > 0 && end + 1 < n && s[start - 1] == s[end + 1]) {
                --start;
                ++end;
            }
            if (end - start + 1 > longestSubstringLength) {
                longestSubstringLength = end - start + 1;
                longestSubstringLengthStartIndex = start;
            }
        }

        return s.substr(longestSubstringLengthStartIndex, longestSubstringLength);
    }
};






Java:



// Time Complexity : O(n^2) where n is the length of the string and space complexity is O(n^2)



class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();  // variable to store the length of the string
        boolean[][] dp = new boolean[n][n];  // 2d array to store the dp values
        int start = 0;  // variable to store the start index of the longest palindrome
        int end = 0;  // variable to store the end index of the longest palindrome
        for(int i = 0; i < n; i++){  // iterate through the string
            dp[i][i] = true;  // update the dp value at the current index to true
            if(i < n - 1 && s.charAt(i) == s.charAt(i + 1)){  // if the current index is less than the length of the string - 1 and the current character is equal to the next character
                dp[i][i + 1] = true;  // update the dp value at the current index and the next index to true
                start = i;  // update the start index to the current index
                end = i + 1;  // update the end index to the next index
            }
        }
        for(int i = n - 1; i >= 0; i--){  // iterate through the string from the end
            for(int j = i + 2; j < n; j++){  // iterate through the string from the current index + 2
                if(s.charAt(i) == s.charAt(j) && dp[i + 1][j - 1]){  // if the current character is equal to the character at the current index + 2 and the dp value at the current index + 1 and the current index - 1 is true
                    dp[i][j] = true;  // update the dp value at the current index and the current index + 2 to true
                    if(j - i > end - start){  // if the difference between the current index and the current index + 2 is greater than the difference between the end index and the start index
                        start = i;  // update the start index to the current index
                        end = j;  // update the end index to the current index + 2
                    }
                }
            }
        }
        return s.substring(start, end + 1);  // return the substring from the start index to the end index
    }
}

2nd Method


class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();

        if (n == 1) { return s; }

        int longestSubstringLength = 1, longestSubstringLengthStartIndex = 0, start, mid = 0, end;

        while (mid + (longestSubstringLength / 2) < n) {
            start = mid;
            end = mid;

            while (end + 1  < n && s.charAt(mid) == s.charAt(end + 1)) {
                ++end;
            }

            mid = end + 1;
            while (start > 0 && end + 1 < n && s.charAt(start - 1) == s.charAt(end + 1)) {
                --start;
                ++end;
            }
            if (end - start + 1 > longestSubstringLength) {
                longestSubstringLength = end - start + 1;
                longestSubstringLengthStartIndex = start;
            }
        }

        return s.substring(longestSubstringLengthStartIndex, longestSubstringLengthStartIndex + longestSubstringLength);
    }
}





