57. Insert Interval


3 Aug 2023


Medium


C++:


// Time Complexity : O(n) where n is the size of the vector intervals and space complexity is O(1)

class Solution { // Time Complexity O(N) and Space Complexity O(1)
public:  // function to insert the interval in the vector of intervals
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {  // function to insert the interval in the vector of intervals
        int n = intervals.size();  // n is the size of the vector of intervals
        int start = newInterval[0]; // start is the start of the interval
        int end = newInterval[1]; // end is the end of the interval
        int i = 0; // i is the index of the interval
        vector<vector<int>> result;  // result is the vector of intervals after inserting the interval
        while(i<n && intervals[i][1] < start){  // while the end of the interval is less than the start of the interval
            result.push_back(intervals[i]);   // push the interval in the result    
            i++;                      // increment the index of the interval
        }
        while(i<n && intervals[i][0] <= end){       // while the start of the interval is less than or equal to the end of the interval
            start = min(start, intervals[i][0]);        // update the start of the interval
            end = max(end, intervals[i][1]);        // update the end of the interval
            i++;              // increment the in interval
        }
        result.push_back({start, end});     // push the interval in the result
        while(i<n){                         // while the index of the interval is less than the size of the vector of intervals
            result.push_back(intervals[i]);     // push the interval in the result
            i++;          // increment the index of the interval
        }
        return result;      // return the result
    }
};



Java:

// Time Complexity : O(n) where n is the size of the vector intervals and space complexity is O(1)

class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {  // function to insert the interval in the vector of intervals
        int n = intervals.length;  // n is the size of the vector of intervals
        int start = newInterval[0]; // start is the start of the interval
        int end = newInterval[1]; // end is the end of the interval
        int i = 0; // i is the index of the interval
        List<int[]> result = new ArrayList<>();  // result is the vector of intervals after inserting the interval
        while(i<n && intervals[i][1] < start){  // while the end of the interval is less than the start of the interval
            result.add(intervals[i]);   // push the interval in the result    
            i++;                      // increment the index of the interval
        }
        while(i<n && intervals[i][0] <= end){       // while the start of the interval is less than or equal to the end of the interval
            start = Math.min(start, intervals[i][0]);        // update the start of the interval
            end = Math.max(end, intervals[i][1]);        // update the end of the interval
            i++;              // increment the in interval
        }
        result.add(new int[]{start, end});     // push the interval in the result
        while(i<n){                         // while the index of the interval is less than the size of the vector of intervals
            result.add(intervals[i]);     // push the interval in the result
            i++;          // increment the index of the interval
        }
        return result.toArray(new int[result.size()][]);      // return the result
    }
}



Python:

// Time Complexity : O(n) where n is the size of the vector intervals and space complexity is O(1)

class Solution(object):
    def insert(self, intervals, newInterval):
        """
        :type intervals: List[List[int]]
        :type newInterval: List[int]
        :rtype: List[List[int]]
        """ 
        n = len(intervals)  # n is the size of the vector of intervals
        start = newInterval[0]  # start is the start of the interval
        end = newInterval[1]  # end is the end of the interval
        i = 0  # i is the index of the interval
        result = []  # result is the vector of intervals after inserting the interval
        while i < n and intervals[i][1] < start:  # while the end of the interval is less than the start of the interval
            result.append(intervals[i])  # push the interval in the result    
            i += 1  # increment the index of the interval
        while i < n and intervals[i][0] <= end:  # while the start of the interval is less than or equal to the end of the interval
            start = min(start, intervals[i][0])  # update the start of the interval
            end = max(end, intervals[i][1])  # update the end of the interval
            i += 1  # increment the in interval
        result.append([start, end])  # push the interval in the result
        while i < n:  # while the index of the interval is less than the size of the vector of intervals
            result.append(intervals[i])  # push the interval in the result
            i += 1  # increment the index of the interval
        return result  # return the result



Python3:


C#:


JavaScript:


Swift:

