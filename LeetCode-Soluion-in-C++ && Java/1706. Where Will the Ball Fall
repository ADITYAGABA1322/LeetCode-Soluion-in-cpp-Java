# LeetCode-Soluion-in-C-Java

1706. Where Will the Ball Fall


10 Feb 2023


Medium


C++:

// Time Complexity : O(n*m) where n is the number of rows and m is the number of columns and space complexity is O(1)

class Solution {
public:
    vector<int> findBall(vector<vector<int>>& grid) {
        int n = grid.size();  // variable to store the number of rows
        int m = grid[0].size();  // variable to store the number of columns
        vector<int> res(m, -1);  // vector to store the result
        for(int i=0; i<m; i++){  // for each column
            int j = i;  // variable to store the current column
            for(int k=0; k<n; k++){  // for each row
                if(grid[k][j] == 1){  // if the ball is moving in the right direction
                    if(j == m - 1 || grid[k][j + 1] == -1){  // if the ball is at the last column or the ball is moving in the opposite direction
                        j = -1;  // update the current column
                        break;  // break the loop
                    }
                    j++;  // increment the current column
                }
                else{  // if the ball is moving in the left direction
                    if(j == 0 || grid[k][j - 1] == 1){  // if the ball is at the first column or the ball is moving in the opposite direction
                        j = -1;  // update the current column
                        break;  // break the loop
                    }
                    j--;  // decrement the current column
                }
            }
            res[i] = j;  // update the result
        }
        return res;  // return the result
    }
};

2nd Method:

class Solution {
public:
    vector<int> findBall(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<int> res;
        for(int i=0; i<n; i++){
            int i1 = i;
            for(int j=0; j<m; j++){
                int i2 = i1 + grid[j][i1];
                if(i2<0 || i2>=n  || grid[j][i2] != grid[j][i1]){
                    i1 = -1;
                    break;
                }
                  i1 = i2;
            }
            res.push_back(i1);
          
        }
        return res;
    }
};





Java:

// Time Complexity : O(n*m) where n is the number of rows and m is the number of columns and space complexity is O(1)

class Solution {
    public int[] findBall(int[][] grid) {
        int n = grid.length;  // variable to store the number of rows
        int m = grid[0].length;  // variable to store the number of columns
        int[] res = new int[m];  // array to store the result
        Arrays.fill(res, -1);  // fill the array with -1
        for(int i=0; i<m; i++){  // for each column
            int j = i;  // variable to store the current column
            for(int k=0; k<n; k++){  // for each row
                if(grid[k][j] == 1){  // if the ball is moving in the right direction
                    if(j == m - 1 || grid[k][j + 1] == -1){  // if the ball is at the last column or the ball is moving in the opposite direction
                        j = -1;  // update the current column
                        break;  // break the loop
                    }
                    j++;  // increment the current column
                }
                else{  // if the ball is moving in the left direction
                    if(j == 0 || grid[k][j - 1] == 1){  // if the ball is at the first column or the ball is moving in the opposite direction
                        j = -1;  // update the current column
                        break;  // break the loop
                    }
                    j--;  // decrement the current column
                }
            }
            res[i] = j;  // update the result
        }
        return res;  // return the result
    }
}

2nd Method:


class Solution {
    public int[] findBall(int[][] grid) {
        int n = grid[0].length;
        int m = grid.length;
        int[] res = new int[n];
        for(int i=0; i<n; i++){
            int i1 = i;
            for(int j=0; j<m; j++){
                int i2 = i1 + grid[j][i1];
                if(i2<0 || i2>=n || grid[j][i2] != grid[j][i1]){
                    i1 = -1;
                    break;
                }
                i1 = i2;
            }
            res[i] = i1;
        }
        return res;
    }
}





