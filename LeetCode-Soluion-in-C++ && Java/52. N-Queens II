52. N-Queens II



30 July 2023



Hard




C++:

// Time Complexity : O(n!) where n is the value of the variable n and space complexity is O(n)


class Solution {
public:
    int totalNQueens(int n) {
        int res = 0;  // variable to store the result
        vector<string> temp(n, string(n, '.'));  // vector to store the temporary result
        solveHelper(res, temp, 0, n);  // call the function to find the solution
        return res;  // return the result
    }
    
    void solveHelper(int& res, vector<string>& temp, int row, int& n){
        if(row == n){  // if the value of the variable row is equal to the value of the variable n
            res++;  // update the value of the variable res
            return;  // return
        }
        for(int col = 0; col < n; col++){  // iterate through the vector temp
            if(isValid(temp, row, col, n)){  // if the current position is valid
                temp[row][col] = 'Q';  // update the value of the vector temp
                solveHelper(res, temp, row + 1, n);  // call the function to find the solution
                temp[row][col] = '.';  // update the value of the vector temp
            }
        }
    }
    
    bool isValid(vector<string>& temp, int row, int col, int& n){
        for(int i = 0; i < row; i++){  // iterate through the vector temp
            if(temp[i][col] == 'Q'){  // if the current position is valid
                return false;  // return false
            }          
        }
        for(int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--){  // iterate through the vector temp
            if(temp[i][j] == 'Q'){  // if the current position is valid
                return false;  // return false
            }
        }
        for(int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++){  // iterate through the vector temp
            if(temp[i][j] == 'Q'){  // if the current position is valid
                return false;  // return false
            }
        }
        return true;  // return true
    }
};



Java:


// Time Complexity : O(n!) where n is the value of the variable n and space complexity is O(n)

class Solution {
    public int totalNQueens(int n) {
        int[] res = new int[1];  // variable to store the result
        List<String> temp = new ArrayList<>();  // list to store the temporary result
        for(int i = 0; i < n; i++){  // iterate through the vector temp
            StringBuilder sb = new StringBuilder();  // variable to store the temporary result
            for(int j = 0; j < n; j++){  // iterate through the vector temp
                sb.append('.');  // append the value into the string builder
            }
            temp.add(sb.toString());  // push the temporary result into the list
        }
        solveHelper(res, temp, 0, n);  // call the function to find the solution
        return res[0];  // return the result
    }
    
    void solveHelper(int[] res, List<String> temp, int row, int n){
        if(row == n){  // if the value of the variable row is equal to the value of the variable n
            res[0]++;  // update the value of the variable res
            return;  // return
        }
        for(int col = 0; col < n; col++){  // iterate through the vector temp
            if(isValid(temp, row, col, n)){  // if the current position is valid
                StringBuilder sb = new StringBuilder(temp.get(row));  // variable to store the temporary result
                sb.setCharAt(col, 'Q');  // update the value of the vector temp
                temp.set(row, sb.toString());  // update the value of the vector temp
                solveHelper(res, temp, row + 1, n);  // call the function to find the solution
                sb.setCharAt(col, '.');  // update the value of the vector temp
                temp.set(row, sb.toString());  // update the value of the vector temp
            }
        }
    }
    
    boolean isValid(List<String> temp, int row, int col, int n){
        for(int i = 0; i < row; i++){  // iterate through the vector temp
            if(temp.get(i).charAt(col) == 'Q'){  // if the current position is valid
                return false;  // return false
            }
        }
        for(int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--){  // iterate through the vector temp
            if(temp.get(i).charAt(j) == 'Q'){  // if the current position is valid
                return false;  // return false
            }
        }
        for(int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++){  // iterate through the vector temp
            if(temp.get(i).charAt(j) == 'Q'){  // if the current position is valid
                return false;  // return false
            }
        }
        return true;  // return true
    }
}

2nd Method

class Solution {
    public int totalNQueens(int n) {
        int[] res = new int[1];  // variable to store the result
        char[][] board = new char[n][n];  // 2D character array to represent the board
        
        // Initialize the board with dots (empty cells)
        for (int i = 0; i < n; i++) {
            Arrays.fill(board[i], '.');
        }
        
        solveHelper(res, board, 0, n);  // call the function to find the solution
        return res[0];  // return the result
    }
    
    void solveHelper(int[] res, char[][] board, int row, int n) {
        if (row == n) {  // if the value of the variable row is equal to the value of the variable n
            res[0]++;  // update the value of the variable res
            return;  // return
        }
        
        for (int col = 0; col < n; col++) {  // iterate through the board
            if (isValid(board, row, col, n)) {  // if the current position is valid
                board[row][col] = 'Q';  // place the queen at the current position
                solveHelper(res, board, row + 1, n);  // call the function to find the solution
                board[row][col] = '.';  // remove the queen at the current position
            }
        }
    }
    
    boolean isValid(char[][] board, int row, int col, int n) {
        // Check for queens in the same column
        for (int i = 0; i < row; i++) {
            if (board[i][col] == 'Q') {
                return false;
            }
        }
        
        // Check for queens in the left diagonal
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }
        
        // Check for queens in the right diagonal
        for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        return true;
    }
}




Python:


// Time Complexity : O(n!) where n is the value of the variable n and space complexity is O(n)

class Solution(object):
    def totalNQueens(self, n):
        """
        :type n: int
        :rtype: int
        """ 
        res = [0]  # variable to store the result
        temp = ['.' * n for _ in range(n)]  # list to store the temporary result
        self.solveHelper(res, temp, 0, n)  # call the function to find the solution
        return res[0]  # return the result
    
    def solveHelper(self, res, temp, row, n):
        if row == n:  # if the value of the variable row is equal to the value of the variable n
            res[0] += 1  # update the value of the variable res
            return  # return
        for col in range(n):  # iterate through the vector temp
            if self.isValid(temp, row, col, n):  # if the current position is valid
                temp[row] = temp[row][:col] + 'Q' + temp[row][col + 1:]  # update the value of the vector temp
                self.solveHelper(res, temp, row + 1, n)  # call the function to find the solution
                temp[row] = temp[row][:col] + '.' + temp[row][col + 1:]  # update the value of the vector temp
    
    def isValid(self, temp, row, col, n):
        for i in range(row):  # iterate through the vector temp
            if temp[i][col] == 'Q':  # if the current position is valid
                return False  # return false
        for i, j in zip(range(row - 1, -1, -1), range(col - 1, -1, -1)):  # iterate through the vector temp
            if temp[i][j] == 'Q':  # if the current position is valid
                return False  # return false
        for i, j in zip(range(row - 1, -1, -1), range(col + 1, n)):  # iterate through the vector temp
            if temp[i][j] == 'Q':  # if the current position is valid
                return False  # return false
        return True  # return true



Python3:


// Time Complexity : O(n!) where n is the value of the variable n and space complexity is O(n)

class Solution:
    def totalNQueens(self, n: int -> int:  // add the missing bracket after int
        res = [0]  # variable to store the result
        temp = ['.' * n for _ in range(n)]  # list to store the temporary result
        self.solveHelper(res, temp, 0, n)  # call the function to find the solution
        return res[0]  # return the result
    
    def solveHelper(self, res, temp, row, n):
        if row == n:  # if the value of the variable row is equal to the value of the variable n
            res[0] += 1  # update the value of the variable res
            return  # return
        for col in range(n):  # iterate through the vector temp
            if self.isValid(temp, row, col, n):  # if the current position is valid
                temp[row] = temp[row][:col] + 'Q' + temp[row][col + 1:]  # update the value of the vector temp
                self.solveHelper(res, temp, row + 1, n)  # call the function to find the solution
                temp[row] = temp[row][:col] + '.' + temp[row][col + 1:]  # update the value of the vector temp
    
    def isValid(self, temp, row, col, n):
        for i in range(row):  # iterate through the vector temp
            if temp[i][col] == 'Q':  # if the current position is valid
                return False  # return false
        for i, j in zip(range(row - 1, -1, -1), range(col - 1, -1, -1)):  # iterate through the vector temp
            if temp[i][j] == 'Q':  # if the current position is valid
                return False  # return false
        for i, j in zip(range(row - 1, -1, -1), range(col + 1, n)):  # iterate through the vector temp
            if temp[i][j] == 'Q':  # if the current position is valid
                return False  # return false
        return True  # return true




C:


// Time Complexity : O(n!) where n is the value of the variable n and space complexity is O(n)

void solveHelper(int* res, char** temp, int row, int n);
bool isValid(char** temp, int row, int col, int n);

int totalNQueens(int n){
    int res = 0;  // variable to store the result
    char** temp = (char**)malloc(sizeof(char*) * n);  // vector to store the temporary result
    for(int i = 0; i < n; i++){  // iterate through the vector temp
        temp[i] = (char*)malloc(sizeof(char) * (n + 1));  // vector to store the temporary result
        for(int j = 0; j < n; j++){  // iterate through the vector temp
            temp[i][j] = '.';  // update the value of the vector temp
        }
        temp[i][n] = '\0';  // update the value of the vector temp
    }
    solveHelper(&res, temp, 0, n);  // call the function to find the solution
    return res;  // return the result
}

void solveHelper(int* res, char** temp, int row, int n){
    if(row == n){  // if the value of the variable row is equal to the value of the variable n
        (*res)++;  // update the value of the variable res
        return;  // return
    }
    for(int col = 0; col < n; col++){  // iterate through the vector temp
        if(isValid(temp, row, col, n)){  // if the current position is valid
            temp[row][col] = 'Q';  // update the value of the vector temp
            solveHelper(res, temp, row + 1, n);  // call the function to find the solution
            temp[row][col] = '.';  // update the value of the vector temp
        }
    }
}

bool isValid(char** temp, int row, int col, int n){
    for(int i = 0; i < row; i++){  // iterate through the vector temp
        if(temp[i][col] == 'Q'){  // if the current position is valid
            return false;  // return false
        }
    }
    for(int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--){  // iterate through the vector temp
        if(temp[i][j] == 'Q'){  // if the current position is valid
            return false;  // return false
        }
    }
    for(int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++){  // iterate through the vector temp
        if(temp[i][j] == 'Q'){  // if the current position is valid
            return false;  // return false
        }
    }
    return true;  // return true
}




C#


// Time Complexity : O(n!) where n is the value of the variable n and space complexity is O(n)

public class Solution {
    public int TotalNQueens(int n) {
        int[] res = new int[1];  // variable to store the result
        IList<string> temp = new List<string>();  // list to store the temporary result
        for(int i = 0; i < n; i++){  // iterate through the vector temp
            StringBuilder sb = new StringBuilder();  // variable to store the temporary result
            for(int j = 0; j < n; j++){  // iterate through the vector temp
                sb.Append('.');  // append the value into the string builder
            }
            temp.Add(sb.ToString());  // push the temporary result into the list
        }
        solveHelper(res, temp, 0, n);  // call the function to find the solution
        return res[0];  // return the result
    }
    
    void solveHelper(int[] res, IList<string> temp, int row, int n){
        if(row == n){  // if the value of the variable row is equal to the value of the variable n
            res[0]++;  // update the value of the variable res
            return;  // return
        }
        for(int col = 0; col < n; col++){  // iterate through the vector temp
            if(isValid(temp, row, col, n)){  // if the current position is valid
                StringBuilder sb = new StringBuilder(temp[row]);  // variable to store the temporary result
                sb[col] = 'Q';  // update the value of the vector temp
                temp[row] = sb.ToString();  // update the value of the vector temp
                solveHelper(res, temp, row + 1, n);  // call the function to find the solution
                sb[col] = '.';  // update the value of the vector temp
                temp[row] = sb.ToString();  // update the value of the vector temp
            }
        }
    }
    
    bool isValid(IList<string> temp, int row, int col, int n){
        for(int i = 0; i < row; i++){  // iterate through the vector temp
            if(temp[i][col] == 'Q'){  // if the current position is valid
                return false;  // return false
            }
        }
        for(int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--){  // iterate through the vector temp
            if(temp[i][j] == 'Q'){  // if the current position is valid
                return false;  // return false
            }
        }
        for(int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++){  // iterate through the vector temp
            if(temp[i][j] == 'Q'){  // if the current position is valid
                return false;  // return false
            }
        }
        return true;  // return true
    }
}





JavaScript:



// Time Complexity : O(n!) where n is the value of the variable n and space complexity is O(n)

var totalNQueens = function(n) {
    let res = [0];  // variable to store the result
    let temp = new Array(n).fill(new Array(n).fill('.'));  // list to store the temporary result
    solveHelper(res, temp, 0, n);  // call the function to find the solution
    return res[0];  // return the result
};

function solveHelper(res, temp, row, n){
    if(row == n){  // if the value of the variable row is equal to the value of the variable n
        res[0]++;  // update the value of the variable res
        return;  // return
    }
    for(let col = 0; col < n; col++){  // iterate through the vector temp
        if(isValid(temp, row, col, n)){  // if the current position is valid
            temp[row][col] = 'Q';  // update the value of the vector temp
            solveHelper(res, temp, row + 1, n);  // call the function to find the solution
            temp[row][col] = '.';  // update the value of the vector temp
        }
    }
}

function isValid(temp, row, col, n){
    for(let i = 0; i < row; i++){  // iterate through the vector temp
        if(temp[i][col] == 'Q'){  // if the current position is valid
            return false;  // return false
        }
    }
    for(let i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--){  // iterate through the vector temp
        if(temp[i][j] == 'Q'){  // if the current position is valid
            return false;  // return false
        }
    }
    for(let i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++){  // iterate through the vector temp
        if(temp[i][j] == 'Q'){  // if the current position is valid
            return false;  // return false
        }
    }
    return true;  // return true
}





Swift:


// Time Complexity : O(n!) where n is the value of the variable n and space complexity is O(n)

class Solution {
    func totalNQueens(_ n: Int) -> Int {
        var res = 0  // variable to store the result
        var temp = [[String]](repeating: [String](repeating: ".", count: n), count: n)  // list to store the temporary result
        solveHelper(&res, &temp, 0, n)  // call the function to find the solution
        return res  // return the result
    }
    
    func solveHelper(_ res: inout Int, _ temp: inout [[String]], _ row: Int, _ n: Int) {
        if row == n {  // if the value of the variable row is equal to the value of the variable n
            res += 1  // update the value of the variable res
            return  // return
        }
        for col in 0..<n {  // iterate through the vector temp
            if isValid(temp, row, col, n) {  // if the current position is valid
                temp[row][col] = "Q"  // update the value of the vector temp
                solveHelper(&res, &temp, row + 1, n)  // call the function to find the solution
                temp[row][col] = "."  // update the value of the vector temp
            }
        }
    }
    
    func isValid(_ temp: [[String]], _ row: Int, _ col: Int, _ n: Int) -> Bool {
        for i in 0..<row {  // iterate through the vector temp
            if temp[i][col] == "Q" {  // if the current position is valid
                return false  // return false
            }
        }
        for (i, j) in zip((0..<row).reversed(), (0..<col).reversed()) {  // iterate through the vector temp
            if temp[i][j] == "Q" {  // if the current position is valid
                return false  // return false
            }
        }
        for (i, j) in zip((0..<row).reversed(), col + 1..<n) {  // iterate through the vector temp
            if temp[i][j] == "Q" {  // if the current position is valid
                return false  // return false
            }
        }
        return true  // return true
    }
}



