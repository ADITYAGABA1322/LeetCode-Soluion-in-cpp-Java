329. Longest Increasing Path in a Matrix



12 Jan 2024



Hard



C++:


class Solution {
public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if (matrix.empty() || matrix[0].empty()) {
            return 0;
        }

        int n = matrix.size();
        int m = matrix[0].size();
        vector<vector<int>> dp(n, vector<int>(m, 0));
        int maxPath = 1;

        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                maxPath = max(maxPath, dfs(matrix, dp, i, j, n, m));
            }
        }

        return maxPath;
    }

private:
    int dfs(vector<vector<int>>& matrix, vector<vector<int>>& dp, int i, int j, int n, int m) {
        if (dp[i][j] != 0) {
            return dp[i][j];
        }

        int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        int maxLen = 1;

        for (auto dir : dirs) {
            int x = i + dir[0];
            int y = j + dir[1];

            if (x >= 0 && x < n && y >= 0 && y < m && matrix[x][y] > matrix[i][j]) {
                maxLen = max(maxLen, 1 + dfs(matrix, dp, x, y, n, m));
            }
        }

        dp[i][j] = maxLen;
        return maxLen;
    }
};
