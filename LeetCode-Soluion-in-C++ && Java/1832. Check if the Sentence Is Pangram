# LeetCode-Soluion-in-C-Java

1832. Check if the Sentence Is Pangram


9 Feb 2023

Easy

C++:

// Time Complexity : O(n) where n is the length of the string and space complexity is O(1)

class Solution {
public:
    bool checkIfPangram(string sentence) {
        vector<int> count(26, 0);  // vector to store the count of the alphabets
        for(int i = 0; i < sentence.length(); i++){  // iterate over the string
            count[sentence[i] - 'a']++;  // increment the count of the current character
        }
        for(int i = 0; i < 26; i++){  // iterate over the vector
            if(count[i] == 0){  // if the count of the current character is 0
                return false;  // return false
            }
        }
        return true;  // return true
    }
};


Java:

// Time Complexity : O(n) where n is the length of the string and space complexity is O(1)

class Solution {
    public boolean checkIfPangram(String sentence) {
        int[] count = new int[26];  // array to store the count of the alphabets
        for(int i = 0; i < sentence.length(); i++){  // iterate over the string
            count[sentence.charAt(i) - 'a']++;  // increment the count of the current character
        }
        for(int i = 0; i < 26; i++){  // iterate over the array
            if(count[i] == 0){  // if the count of the current character is 0
                return false;  // return false
            }
        }
        return true;  // return true
    }
}
                  OR
              
 class Solution {
    public boolean checkIfPangram(String sentence) {
        int seen = 0;
        for(char c : sentence.toCharArray()) {
            int ci = c - 'a';
            seen = seen | (1 << ci);
        }
        return seen == ((1 << 26) - 1);
    }
}
                  
