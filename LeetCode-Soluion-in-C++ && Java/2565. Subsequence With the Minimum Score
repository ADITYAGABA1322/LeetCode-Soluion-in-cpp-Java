2565. Subsequence With the Minimum Score


5 March 2023



Hard


C++:


// Time Complexity : O(n) where n is the length of the array and space complexity is O(1)


class Solution {
public:
int minimumScore(string s, string t) {
    int ss = s.size(), st = t.size(), k = st - 1;
    vector<int> dp(st, -1);
    for (int i = ss - 1; i >= 0 && k >= 0; --i)
        if (s[i] == t[k])
            dp[k--] = i;
    int res = k + 1;
    for (int i = 0, j = 0; i < ss && j < st && res > 0; ++i)
        if (s[i] == t[j]) {
            for (; k < t.size() && dp[k] <= i; ++k);
            res = min(res, k - (++j));
        }
    return res;
}
 
};



Java:


// Time Complexity : O(n) where n is the length of the array and space complexity is O(1)



class Solution {
    public int minimumScore(String s, String t) {
        int ss = s.length(), st = t.length(), k = st - 1;
        int[] dp = new int[st];
        Arrays.fill(dp, -1);
        for (int i = ss - 1; i >= 0 && k >= 0; --i)
            if (s.charAt(i) == t.charAt(k))
                dp[k--] = i;
        int res = k + 1;
        for (int i = 0, j = 0; i < ss && j < st && res > 0; ++i)
            if (s.charAt(i) == t.charAt(j)) {
                for (; k < t.length() && dp[k] <= i; ++k);
                res = Math.min(res, k - (++j));
            }
        return res;
    }
 
}

