1679. Max Number of K-Sum Pairs




8 Nov 2023



Medium


C++:

// Time Complexity : O(nlogn) where n is the size of the vector nums and space complexity is O(1)

class Solution {
public:
    int maxOperations(vector<int>& nums, int k) { // function to find the maxOperations
        int n=nums.size(); // variable to store the size of the nums
        sort(nums.begin(),nums.end()); // sort the nums
        int i=0; // variable to store the i
        int j=n-1; // variable to store the j
        int ans=0; // variable to store the ans
        while(i<j){ // loop until i is less than j
            if(nums[i]+nums[j]==k){ // if nums[i]+nums[j] is equal to k
                ans++; // increment the ans
                i++; // increment the i
                j--; // decrement the j
            }
            else if(nums[i]+nums[j]>k)j--; // else if nums[i]+nums[j] is greater than k decrement the j
            else i++; // else increment the i
        }
        return ans; // return the ans
    }
};


Swift:

// Time Complexity : O(nlogn) where n is the size of the vector nums and space complexity is O(1)

class Solution {
    func maxOperations(_ nums: [Int], _ k: Int) -> Int { // function to find the maxOperations
        let n = nums.count // variable to store the size of the nums
        var nums = nums.sorted() // sort the nums
        var i = 0 // variable to store the i
        var j = n - 1 // variable to store the j
        var ans = 0 // variable to store the ans
        while i < j { // loop until i is less than j
            if nums[i] + nums[j] == k { // if nums[i]+nums[j] is equal to k
                ans += 1 // increment the ans
                i += 1 // increment the i
                j -= 1 // decrement the j
            } else if nums[i] + nums[j] > k { // else if nums[i]+nums[j] is greater than k
                j -= 1 // decrement the j
            } else { // else
                i += 1 // increment the i
            }
        }
        return ans // return the ans
    }
}
     
