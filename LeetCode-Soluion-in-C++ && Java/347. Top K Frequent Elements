347. Top K Frequent Elements




5 Dec 2023



Medium


C++:


class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        int n = nums.size();
        unordered_map<int , int> freq;
        vector<int> ans;
        for(auto num : nums) freq[num]++;
        vector<vector<int>> bucket(n + 1);
        for(auto it : freq){
            int n = it.second;
            int m = it.first;
            bucket[n].push_back(m);
        }
       
        for (int i = n; i >= 0; i--) {
            if (!bucket[i].empty()) {
                for (int num : bucket[i]) {
                    ans.push_back(num);
                    if (ans.size() == k) {
                        return ans;
                    }
                }
            }
        }
        return ans;
    }
};


1st Method using unordered_map

// Time Complexity : O(nlogk) where n is the size of the vector nums and space complexity is O(1)

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) { // function to find the topKFrequent
        int n=nums.size(); // variable to store the size of the nums
        unordered_map<int,int>mp; // unordered_map to store the mp
        for(int i=0;i<n;i++)mp[nums[i]]++; // loop for i
        vector<pair<int,int>>v; // vector to store the pair
        for(auto x:mp)v.push_back({x.second,x.first}); // loop for x
        sort(v.begin(),v.end()); // sort the v
        vector<int>ans; // vector to store the ans
        for(int i=v.size()-1;i>=0;i--){ // loop for i
            ans.push_back(v[i].second); // push the v[i].second
            if(ans.size()==k)break; // if ans.size() is equal to k break
        }
        return ans; // return the ans
    }
};

//2nd Method using priority_queue

// Time Complexity : O(nlogk) where n is the size of the vector nums and space complexity is O(1)

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) { // function to find the topKFrequent
        int n=nums.size(); // variable to store the size of the nums
        unordered_map<int,int>mp; // unordered_map to store the mp
        for(int i=0;i<n;i++)mp[nums[i]]++; // loop for i
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq; // priority_queue to store the pair
        for(auto x:mp){ // loop for x
            pq.push({x.second,x.first}); // push the pq
            if(pq.size()>k)pq.pop(); // if pq.size() is greater than k pop the pq
        }
        vector<int>ans; // vector to store the ans
        while(!pq.empty()){ // while pq is not empty
            pair<int,int>temp=pq.top(); // variable to store the temp
            pq.pop(); // pop the pq
            ans.push_back(temp.second); // push the temp.second
        }
        return ans; // return the ans
    }
};

// 3rd Method using bucket sort

// Time Complexity : O(n) where n is the size of the vector nums and space complexity is O(1)

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) { // function to find the topKFrequent
        int n=nums.size(); // variable to store the size of the nums
        unordered_map<int,int>mp; // unordered_map to store the mp
        for(int i=0;i<n;i++)mp[nums[i]]++; // loop for i
        vector<vector<int>>bucket(n+1); // vector to store the bucket
        for(auto x:mp){ // loop for x
            int freq=x.second; // variable to store the freq
            int num=x.first; // variable to store the num
            bucket[freq].push_back(num); // push the bucket[freq]
        }
        vector<int>ans; // vector to store the ans
        for(int i=n;i>=0;i--){ // loop for i
            for(int j=0;j<bucket[i].size();j++){ // loop for j
                ans.push_back(bucket[i][j]); // push the bucket[i][j]
                if(ans.size()==k)return ans; // if ans.size() is equal to k return ans
            }
        }
        return ans; // return the ans
    }
};

// 4th Method using counting sort

// Time Complexity : O(n) where n is the size of the vector nums and space complexity is O(1)

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) { // function to find the topKFrequent
        int n=nums.size(); // variable to store the size of the nums
        unordered_map<int,int>mp; // unordered_map to store the mp
        for(int i=0;i<n;i++)mp[nums[i]]++; // loop for i
        vector<int>freq; // vector to store the freq
        for(auto x:mp)freq.push_back(x.second); // loop for x
        sort(freq.begin(),freq.end()); // sort the freq
        vector<int>ans; // vector to store the ans
        for(int i=freq.size()-1;i>=0;i--){ // loop for i
            for(auto x:mp){ // loop for x
                if(x.second==freq[i]){ // if x.second is equal to freq[i]
                    while(freq[i]--)ans.push_back(x.first); // while freq[i]-- push the x.first
                    mp.erase(x.first); // erase the x.first
                    break; // break
                }
            }
            if(ans.size()==k)return ans; // if ans.size() is equal to k return ans
        }
        return ans; // return the ans
    }
};

Java:

// Time Complexity : O(nlogk) where n is the size of the vector nums and space complexity is O(1)

class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) { // function to find the topKFrequent
        int n=nums.length; // variable to store the size of the nums
        HashMap<Integer,Integer>mp=new HashMap<>(); // unordered_map to store the mp
        for(int i=0;i<n;i++)mp.put(nums[i],mp.getOrDefault(nums[i],0)+1); // loop for i
        ArrayList<Pair<Integer,Integer>>v=new ArrayList<>(); // vector to store the pair
        for(Map.Entry<Integer,Integer>entry:mp.entrySet())v.add(new Pair<>(entry.getValue(),entry.getKey())); // loop for entry
        Collections.sort(v); // sort the v
        ArrayList<Integer>ans=new ArrayList<>(); // vector to store the ans
        for(int i=v.size()-1;i>=0;i--){ // loop for i
            ans.add(v.get(i).getValue()); // push the v[i].second
            if(ans.size()==k)break; // if ans.size() is equal to k break
        }
        return ans; // return the ans
    }
}

//2nd Method using priority_queue

// Time Complexity : O(nlogk) where n is the size of the vector nums and space complexity is O(1)

class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) { // function to find the topKFrequent
        int n=nums.length; // variable to store the size of the nums
        HashMap<Integer,Integer>mp=new HashMap<>(); // unordered_map to store the mp
        for(int i=0;i<n;i++)mp.put(nums[i],mp.getOrDefault(nums[i],0)+1); // loop for i
        PriorityQueue<Pair<Integer,Integer>>pq=new PriorityQueue<>(); // priority_queue to store the pair
        for(Map.Entry<Integer,Integer>entry:mp.entrySet()){ // loop for entry
            pq.add(new Pair<>(entry.getValue(),entry.getKey())); // push the pq
            if(pq.size()>k)pq.poll(); // if pq.size() is greater than k pop the pq
        }
        ArrayList<Integer>ans=new ArrayList<>(); // vector to store the ans
        while(!pq.isEmpty()){ // while pq is not empty
            Pair<Integer,Integer>temp=pq.poll(); // variable to store the temp
            ans.add(temp.getValue()); // push the temp.second
        }
        return ans; // return the ans
    }
};

// 3rd Method using bucket sort

// Time Complexity : O(n) where n is the size of the vector nums and space complexity is O(1)

class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) { // function to find the topKFrequent
        int n=nums.length; // variable to store the size of the nums
        HashMap<Integer,Integer>mp=new HashMap<>(); // unordered_map to store the mp
        for(int i=0;i<n;i++)mp.put(nums[i],mp.getOrDefault(nums[i],0)+1); // loop for i
        String[]bucket=new String[n+1]; // vector to store the bucket
        for(Map.Entry<Integer,Integer>entry:mp.entrySet()){ // loop for entry
            int freq=entry.getValue(); // variable to store the freq
            int num=entry.getKey(); // variable to store the num
            bucket[freq]+=String.join("",Collections.nCopies(freq,String.valueOf(num))); // update the bucket[freq]
        }
        ArrayList<Integer>ans=new ArrayList<>(); // vector to store the ans
        for(int i=n;i>=0;i--){ // loop for i
            for(int j=0;j<bucket[i].length();j++){ // loop for j
                ans.add(bucket[i].charAt(j)); // push the bucket[i][j]
                if(ans.size()==k)return ans; // if ans.size() is equal to k return ans
            }
        }
        return ans; // return the ans
    }
};

// 4th Method using counting sort

// Time Complexity : O(n) where n is the size of the vector nums and space complexity is O(1)

class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) { // function to find the topKFrequent
        int n=nums.length; // variable to store the size of the nums
        HashMap<Integer,Integer>mp=new HashMap<>(); // unordered_map to store the mp
        for(int i=0;i<n;i++)mp.put(nums[i],mp.getOrDefault(nums[i],0)+1); // loop for i
        ArrayList<Integer>freq=new ArrayList<>(); // vector to store the freq
        for(Map.Entry<Integer,Integer>entry:mp.entrySet())freq.add(entry.getValue()); // loop for entry
        Collections.sort(freq); // sort the freq
        ArrayList<Integer>ans=new ArrayList<>(); // vector to store the ans
        for(int i=freq.size()-1;i>=0;i--){ // loop for i
            for(Map.Entry<Integer,Integer>entry:mp.entrySet()){ // loop for entry
                if(entry.getValue()==freq.get(i)){ // if entry.getValue() is equal to freq[i]
                    while(freq.get(i)-->0)ans.add(entry.getKey()); // while freq[i]-- push the entry.getKey()
                    mp.remove(entry.getKey()); // erase the entry.getKey()
                    break; // break
                }
            }
            if(ans.size()==k)return ans; // if ans.size() is equal to k return ans
        }
        return ans; // return the ans
    }
};

