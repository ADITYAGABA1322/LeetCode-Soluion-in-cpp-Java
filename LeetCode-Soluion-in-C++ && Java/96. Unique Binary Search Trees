96. Unique Binary Search Trees




9 Aug 2023


Medium


C++:


// Time Complexity : O(n^2) where n is the size of the vector matrix and space complexity is O(n)


class Solution {
public:
    int numTrees(int n) {
        vector<int> dp(n+1, 0); // vector to store the result
        dp[0] = 1; // initialize the dp[0] to 1
        dp[1] = 1; // initialize the dp[1] to 1
        for(int i=2; i<=n; i++){ // loop for i
            for(int j=1; j<=i; j++){ // loop for j 
                dp[i] += dp[j-1] * dp[i-j]; // update the dp[i] ,  dp[j-1] used for left subtree and dp[i-j] used for right subtree 
            }
        }
        return dp[n]; // return the dp[n]
    }
};


Java:

// Time Complexity : O(n^2) where n is the size of the vector matrix and space complexity is O(n)

class Solution {
    public int numTrees(int n) {
        int[] dp = new int[n+1]; // vector to store the result
        dp[0] = 1; // initialize the dp[0] to 1
        dp[1] = 1; // initialize the dp[1] to 1
        for(int i=2; i<=n; i++){ // loop for i
            for(int j=1; j<=i; j++){ // loop for j 
                dp[i] += dp[j-1] * dp[i-j]; // update the dp[i] ,  dp[j-1] used for left subtree and dp[i-j] used for right subtree 
            }
        }
        return dp[n]; // return the dp[n]
    }
}


Python:

// Time Complexity : O(n^2) where n is the size of the vector matrix and space complexity is O(n)

class Solution(object):
    def numTrees(self, n):
        """
        :type n: int
        :rtype: int
        """ 
        dp = [0] * (n+1)  # vector to store the result
        dp[0] = 1  # initialize the dp[0] to 1
        dp[1] = 1  # initialize the dp[1] to 1
        for i in range(2, n+1):  # loop for i
            for j in range(1, i+1):  # loop for j 
                dp[i] += dp[j-1] * dp[i-j]  # update the dp[i] ,  dp[j-1] used for left subtree and dp[i-j] used for right subtree 
        return dp[n]  # return the dp[n]


Python3:

// Time Complexity : O(n^2) where n is the size of the vector matrix and space complexity is O(n)

class Solution:
    def numTrees(self, n: int) -> int:  // add the missing colon after int
        dp = [0] * (n+1)  # vector to store the result
        dp[0] = 1  # initialize the dp[0] to 1
        dp[1] = 1  # initialize the dp[1] to 1
        for i in range(2, n+1):  # loop for i
            for j in range(1, i+1):  # loop for j 
                dp[i] += dp[j-1] * dp[i-j]  # update the dp[i] ,  dp[j-1] used for left subtree and dp[i-j] used for right subtree 
        return dp[n]  # return the dp[n]


C:

// Time Complexity : O(n^2) where n is the size of the vector matrix and space complexity is O(n)

int numTrees(int n){
    int dp[n+1];  // vector to store the result
    memset(dp, 0, sizeof(dp));  // initialize the dp[0] to 1
    dp[0] = 1;  // initialize the dp[1] to 1
    dp[1] = 1;  // initialize the dp[1] to 1
    for(int i=2; i<=n; i++){  // loop for i
        for(int j=1; j<=i; j++){  // loop for j 
            dp[i] += dp[j-1] * dp[i-j];  // update the dp[i] ,  dp[j-1] used for left subtree and dp[i-j] used for right subtree 
        }
    }
    return dp[n];  // return the dp[n]
}



C#:

// Time Complexity : O(n^2) where n is the size of the vector matrix and space complexity is O(n)

public class Solution {
    public int NumTrees(int n) {
        int[] dp = new int[n+1];  // vector to store the result
        Array.Fill(dp, 0);  // initialize the dp[0] to 1
        dp[0] = 1;  // initialize the dp[1] to 1
        dp[1] = 1;  // initialize the dp[1] to 1
        for(int i=2; i<=n; i++){  // loop for i
            for(int j=1; j<=i; j++){  // loop for j 
                dp[i] += dp[j-1] * dp[i-j];  // update the dp[i] ,  dp[j-1] used for left subtree and dp[i-j] used for right subtree 
            }
        }
        return dp[n];  // return the dp[n]
    }
}


JavaScript:


// Time Complexity : O(n^2) where n is the size of the vector matrix and space complexity is O(n)

var numTrees = function(n) {
    let dp = new Array(n+1).fill(0);  // vector to store the resuk
    dp[0] = 1;  // initialize the dp[0] to 1
    dp[1] = 1;  // initialize the dp[1] to 1
    for(let i=2; i<=n; i++){  // loop for i
        for(let j=1; j<=i; j++){  // loop for j 
            dp[i] += dp[j-1] * dp[i-j];  // update the dp[i] ,  dp[j-1] used for left subtree and dp[i-j] used for right subtree 
        }
    }
    return dp[n];  // return the dp[n]
};



Swift:


Dart:
