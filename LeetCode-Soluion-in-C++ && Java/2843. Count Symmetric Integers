2843. Count Symmetric Integers


3 Sept 2023


Easy 


C++:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(log(num))

class Solution {
public:
    int countSymmetricIntegers(int low, int high) {
        int res = 0;  // variable to store the result
        for(int i=low; i<=high; i++){  // loop until i is less than or equal to high
            if(isSymmetric(i)) res++;  // if the number is symmetric increment the result
        }
        return res;  // return the result
    }
    bool isSymmetric(int num){  // function to check if the number is symmetric
        string s = to_string(num);  // variable to store the string
        int n = s.length();  // variable to store the length of the string
        if(n%2 == 1) return false;  // if the length of the string is odd return false
        int leftSum = 0;  // variable to store the left sum
        int rightSum = 0;  // variable to store the right sum
        for(int i=0; i<n/2; i++){  // loop until i is less than n/2
            leftSum += s[i] - '0';  // update the left sum
            rightSum += s[n-i-1] - '0';  // update the right sum
        }
        return leftSum == rightSum;  // return true if the left sum is equal to the right sum else return false
    }
};

Java:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(log(num))

class Solution {
    public int countSymmetricIntegers(int low, int high) {
        int res = 0;  // variable to store the result
        for(int i=low; i<=high; i++){  // loop until i is less than or equal to high
            if(isSymmetric(i)) res++;  // if the number is symmetric increment the result
        }
        return res;  // return the result
    }
    public boolean isSymmetric(int num){  // function to check if the number is symmetric
        String s = Integer.toString(num);  // variable to store the string
        int n = s.length();  // variable to store the length of the string
        if(n%2 == 1) return false;  // if the length of the string is odd return false
        int leftSum = 0;  // variable to store the left sum
        int rightSum = 0;  // variable to store the right sum
        for(int i=0; i<n/2; i++){  // loop until i is less than n/2
            leftSum += s.charAt(i) - '0';  // update the left sum
            rightSum += s.charAt(n-i-1) - '0';  // update the right sum
        }
        return leftSum == rightSum;  // return true if the left sum is equal to the right sum else return false
    }
}


Python:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(log(num))

class Solution(object): # class Solution 
    def countSymmetricIntegers(self, low, high): # function to count symmetric integers
        """
        :type low: int
        :type high: int
        :rtype: int
        """
        res = 0 # variable to store the result
        for i in range(low, high+1): # loop until i is less than or equal to high
            if self.isSymmetric(i): res += 1 # if the number is symmetric increment the result
        return res # return the result
    def isSymmetric(self, num): # function to check if the number is symmetric
        s = str(num) # variable to store the string
        n = len(s) # variable to store the length of the string
        if n%2 == 1: return False # if the length of the string is odd return false
        leftSum = 0 # variable to store the left sum
        rightSum = 0 # variable to store the right sum
        for i in range(n//2): # loop until i is less than n/2
            leftSum += int(s[i]) # update the left sum
            rightSum += int(s[n-i-1]) # update the right sum
        return leftSum == rightSum # return true if the left sum is equal to the right sum else return false


Python3:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(log(num))

class Solution:
    def countSymmetricIntegers(self, low: int, high: int) -> int:  # function to count symmetric integers
        res = 0  # variable to store the result
        for i in range(low, high+1):  # loop until i is less than or equal to high
            if self.isSymmetric(i): res += 1  # if the number is symmetric increment the result
        return res  # return the result
    def isSymmetric(self, num: int) -> bool:  # function to check if the number is symmetric
        s = str(num)  # variable to store the string
        n = len(s)  # variable to store the length of the string
        if n%2 == 1: return False  # if the length of the string is odd return false
        leftSum = 0  # variable to store the left sum
        rightSum = 0  # variable to store the right sum
        for i in range(n//2):  # loop until i is less than n/2
            leftSum += int(s[i])  # update the left sum
            rightSum += int(s[n-i-1])  # update the right sum
        return leftSum == rightSum  # return true if the left sum is equal to the right sum else return false

C:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(log(num))

#include <stdio.h>
#include <stdbool.h>
#include <string.h>

// Function prototype for isSymmetric
bool isSymmetric(int num);

int countSymmetricIntegers(int low, int high) {
    int res = 0; // variable to store the result
    for (int i = low; i <= high; i++)
    { // loop until i is less than or equal to high
        if (isSymmetric(i))
            res++; // if the number is symmetric increment the result
    }
    return res; // return the result
}

bool isSymmetric(int num) {  // function to check if the number is symmetric
    char s[100];             // variable to store the string
    sprintf(s, "%d", num);   // variable to store the length of the string
    int n = strlen(s);       // variable to store the length of the string
    if (n % 2 == 1)
        return false; // if the length of the string is odd return false
    int leftSum = 0;  // variable to store the left sum
    int rightSum = 0; // variable to store the right sum
    for (int i = 0; i < n / 2; i++)
    {                                   // loop until i is less than n/2
        leftSum += s[i] - '0';          // update the left sum
        rightSum += s[n - i - 1] - '0'; // update the right sum
    }
    return leftSum == rightSum; // return true if the left sum is equal to the right sum else return false
}


C#:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(log(num))

public class Solution {
    public int CountSymmetricIntegers(int low, int high) {
        int res = 0;  // variable to store the result
        for(int i=low; i<=high; i++){  // loop until i is less than or equal to high
            if(isSymmetric(i)) res++;  // if the number is symmetric increment the result
        }
        return res;  // return the result
        }
    public bool isSymmetric(int num){  // function to check if the number is symmetric
        string s = num.ToString();  // variable to store the string
        int n = s.Length;  // variable to store the length of the string
        if(n%2 == 1) return false;  // if the length of the string is odd return false
        int leftSum = 0;  // variable to store the left sum
        int rightSum = 0;  // variable to store the right sum
        for(int i=0; i<n/2; i++){  // loop until i is less than n/2
            leftSum += s[i] - '0';  // update the left sum
            rightSum += s[n-i-1] - '0';  // update the right sum
        }
        return leftSum == rightSum;  // return true if the left sum is equal to the right sum else return false
        }
}


JavaScript:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(log(num))

var countSymmetricIntegers = function(low, high) {
    let res = 0;  // variable to store the result
    for(let i=low; i<=high; i++){  // loop until i is less than or equal to high
        if(isSymmetric(i)) res++;  // if the number is symmetric increment the result
    }
    return res;  // return the result
};

var isSymmetric = function(num) {  // function to check if the number is symmetric
    let s = num.toString();  // variable to store the string
    let n = s.length;  // variable to store the length of the string
    if(n%2 == 1) return false;  // if the length of the string is odd return false
    let leftSum = 0;  // variable to store the left sum
    let rightSum = 0;  // variable to store the right sum
    for(let i=0; i<n/2; i++){  // loop until i is less than n/2
        leftSum += parseInt(s[i]);  // update the left sum
        rightSum += parseInt(s[n-i-1]);  // update the right sum
    }
    return leftSum == rightSum;  // return true if the left sum is equal to the right sum else return false
};

Swift:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(log(num))

class Solution {
    func countSymmetricIntegers(_ low: Int, _ high: Int) -> Int {
        var res = 0;  // variable to store the result
        for i in low...high {  // loop until i is less than or equal to high
            if isSymmetric(i) { res += 1
            } // if the number is symmetric increment the result
            }
        return res;  // return the result
    }
    func isSymmetric(_ num: Int) -> Bool {  // function to check if the number is symmetric
        let s = String(num);  // variable to store the string
        let n = s.count;  // variable to store the length of the string
        if n%2 == 1 { return false }  // if the length of the string is odd return false
        var leftSum = 0;  // variable to store the left sum
        var rightSum = 0;  // variable to store the right sum
        for i in 0..<n/2 {  // loop until i is less than n/2
            leftSum += Int(String(s[s.index(s.startIndex, offsetBy: i)]))!;  // update the left sum
            rightSum += Int(String(s[s.index(s.startIndex, offsetBy: n-i-1)]))!;  // update the right sum
        }
        return leftSum == rightSum;  // return true if the left sum is equal to the right sum else return false
    }
}


Dart:


// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(log(num))

class Solution {
    int countSymmetricIntegers(int low, int high) {
        int res = 0;  // variable to store the result
        for(int i=low; i<=high; i++){  // loop until i is less than or equal to high
            if(isSymmetric(i)) res++;  // if the number is symmetric increment the result
        }
        return res;  // return the result
    }
    bool isSymmetric(int num){  // function to check if the number is symmetric
        String s = num.toString();  // variable to store the string
        int n = s.length;  // variable to store the length of the string
        if(n%2 == 1) return false;  // if the length of the string is odd return false
        int leftSum = 0;  // variable to store the left sum
        int rightSum = 0;  // variable to store the right sum
        for(int i=0; i<n/2; i++){  // loop until i is less than n/2
            leftSum += int.parse(s[i]);  // update the left sum
            rightSum += int.parse(s[n-i-1]);  // update the right sum
        }
        return leftSum == rightSum;  // return true if the left sum is equal to the right sum else return false
    }
}





