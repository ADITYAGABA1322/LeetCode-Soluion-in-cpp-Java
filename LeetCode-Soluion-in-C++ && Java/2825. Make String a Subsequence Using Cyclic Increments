2825. Make String a Subsequence Using Cyclic Increments

20 Aug 2023

Medium


C++:

// Time Complexity : O(n) where n is the size of the vector nums and space complexity is O(1)

class Solution {
public:
    bool canMakeSubsequence(std::string str1, std::string str2) {
        int i = 0; // variable to store the i
        int j = 0; // variable to store the j
        int n = str1.size(); // variable to store the size of the str1
        int m = str2.size(); // variable to store the size of the str2
        while(i<n && j<m){ // loop until i is less than n and j is less than m
            if(str1[i] == str2[j] || str1[i]+1 == str2[j] || str1[i] - 25 == str2[j]){  // if str1[i] is equal to str2[j] or str1[i]+1 is equal to str2[j] or str1[i] - 25 is equal to str2[j]
                j++; // increment the j
            }
            i++; // increment the i
        }
        return j == m; // return true if j is equal to m else return false
    }
};

Java:

// Time Complexity : O(n) where n is the size of the vector nums and space complexity is O(1)

class Solution {
    public boolean canMakeSubsequence(String str1, String str2) {
        int i = 0; // variable to store the i
        int j = 0; // variable to store the j
        int n = str1.length(); // variable to store the size of the str1
        int m = str2.length(); // variable to store the size of the str2
        while(i<n && j<m){ // loop until i is less than n and j is less than m
            if(str1.charAt(i) == str2.charAt(j) || str1.charAt(i)+1 == str2.charAt(j) || str1.charAt(i) - 25 == str2.charAt(j)){  // if str1[i] is equal to str2[j] or str1[i]+1 is equal to str2[j] or str1[i] - 25 is equal to str2[j]
                j++; // increment the j
            }
            i++; // increment the i
        }
        return j == m; // return true if j is equal to m else return false
    }
}

Python:

// Time Complexity : O(n) where n is the size of the vector nums and space complexity is O(1)

class Solution(object):
    def canMakeSubsequence(self, str1, str2):
        """
        :type str1: str
        :type str2: str
        :rtype: bool
        """
        i = 0 # variable to store the i
        j = 0 # variable to store the j
        n = len(str1) # variable to store the size of the str1
        m = len(str2) # variable to store the size of the str2
        while(i<n and j<m): # loop until i is less than n and j is less than m
              if str2[j] in {str1[i], chr(ord(str1[i]) + 1), chr(ord(str1[i]) - 25)}:  # if str1[i] is equal to str2[j] or str1[i]+1 is equal to str2[j] or str1[i] - 25 is equal to str2[j]
                j += 1 # increment the j
            i += 1 # increment the i
        return j == m # return true if j is eq


Python3:

// Time Complexity : O(n) where n is the size of the vector nums and space complexity is O(1)

class Solution:
    def canMakeSubsequence(self, str1: str, str2: str) -> bool:
        i = 0 # variable to store the i
        j = 0 # variable to store the j
        n = len(str1) # variable to store the size of the str1
        m = len(str2) # variable to store the size of the str2
        while(i<n and j<m): # loop until i is less than n and j is less than m
              if str2[j] in {str1[i], chr(ord(str1[i]) + 1), chr(ord(str1[i]) - 25)}:  # if str1[i] is equal to str2[j] or str1[i]+1 is equal to str2[j] or str1[i] - 25 is equal to str2[j]
                j += 1 # increment the j
            i += 1 # increment the i
        return j == m # return true if j is equal to m else return false
        

C:

C#:

JavaScript:

Swift:

Dart:



