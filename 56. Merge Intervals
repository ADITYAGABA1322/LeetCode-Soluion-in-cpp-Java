56. Merge Intervals



3 Aug 2023



Medium



C++:


// Time Complexity : O(nlogn) where n is the size of the vector intervals and space complexity is O(1)

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
         vector<vector<int>> merge; // vector to store the result
         sort(intervals.begin(), intervals.end()); // sort the vector intervals
         for(auto it : intervals){ // iterate through the vector intervals
             if(merge.empty() || merge.back()[1] < it[0]){ // if the vector merge is empty or the last elemet of the vector merge is less than the first element of the vector it
                 merge.push_back(it); // push the vector it to the vector merge
             }
             else{ // else
                 merge.back()[1] = max(merge.back()[1], it[1]); // update the last element of the vector merge
             }
         }
        return merge; // return the vector merge
    }
};

Java:

// Time Complexity : O(nlogn) where n is the size of the vector intervals and space complexity is O(1)

class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0])); // sort the vector intervals
        LinkedList<int[]> merge = new LinkedList<>(); // vector to store the result
        for(int[] it : intervals){ // iterate through the vector intervals
            if(merge.isEmpty() || merge.getLast()[1] < it[0]){ // if the vector merge is empty or the last element of the vector merge is less than the first element of the vector it
                merge.add(it); // push the vector it to the vector merge
            }
            else{ // else
                merge.getLast()[1] = Math.max(merge.getLast()[1], it[1]); // update the last element of the vector merge
            }
        }
        return merge.toArray(new int[merge.size()][]); // return the vector merge
    }
}

Python:

class Solution(object):
    def merge(self, intervals):
        """
        :type intervals: List[List[int]]
        :rtype: List[List[int]]
        """ 
        intervals.sort(key = lambda x: x[0])  # sort the vector intervals
        merge = []  # vector to store the result
        for it in intervals:  # iterate through the vector intervals
            if not merge or merge[-1][1] < it[0]:  # if the vector merge is empty or the last element of the vector merge is less than the first element of the vector it
                merge.append(it)  # push the vector it to the vector merge
            else:  # else
                merge[-1][1] = max(merge[-1][1], it[1])  # update the last element of the vector merge
        return merge  # return the vector merge


Python3:

// Time Complexity : O(nlogn) where n is the size of the vector intervals and space complexity is O(1)

class Solution:
    def merge(self, intervals: List[List[int]) -> List[List[int]]:  // add the missing bracket after List[int] and add the missing colon after List[int] and add the missing colon after List[int]
        intervals.sort(key = lambda x: x[0])  # sort the vector intervals
        merge = []  # vector to store the result
        for it in intervals:  # iterate through the vector intervals
            if not merge or merge[-1][1] < it[0]:  # if the vector merge is empty or the last element of the vector merge is less than the first element of the vector it
                merge.append(it)  # push the vector it to the vector merge
            else:  # else
                merge[-1][1] = max(merge[-1][1], it[1])  # update the last element of the vector merge
        return merge  # return the vector merge


C:

// Time Complexity : O(nlogn) where n is the size of the vector intervals and space complexity is O(1)

int compare(const void* a, const void* b){  // compare function
    return (*(int**)a)[0] - (*(int**)b)[0];  // return the difference of the first element of the vector a and the first element of the vector b
}

int** merge(int** intervals, int intervalsSize, int* intervalsColSize, int* returnSize, int** returnColumnSizes){
    qsort(intervals, intervalsSize, sizeof(int*), compare);  // sort the vector intervals
    int** merge = (int**)malloc(sizeof(int*) * intervalsSize);  // vector to store the result
    *returnSize = 0;  // variable to store the size of the result
    for(int i = 0; i < intervalsSize; i++){  // iterate through the vector intervals
        if(*returnSize == 0 || merge[*returnSize - 1][1] < intervals[i][0]){  // if the vector merge is empty or the last element of the vector merge is less than the first element of the vector it
            merge[*returnSize] = intervals[i];  // push the vector it to the vector merge
            (*returnSize)++;  // increment the size of the result
        }
        else{  // else
            merge[*returnSize - 1][1] = fmax(merge[*returnSize - 1][1], intervals[i][1]);  // update the last element of the vector merge
        }
    }
    *returnColumnSizes = (int*)malloc(sizeof(int) * (*returnSize));  // variable to store the size of the result
    for(int i = 0; i < *returnSize; i++){  // iterate through the vector intervals
        (*returnColumnSizes)[i] = 2;  // update the size of the result
    }
    return merge;  // return the vector merge
}


C#:

// Time Complexity : O(nlogn) where n is the size of the vector intervals and space complexity is O(1)

public class Solution {
    public int[][] Merge(int[][] intervals) {
        Array.Sort(intervals, (a, b) => a[0] - b[0]);  // sort the vector intervals
        List<int[]> merge = new List<int[]>();  // vector to store the result
        foreach(int[] it in intervals){  // iterate through the vector intervals
            if(merge.Count == 0 || merge[merge.Count - 1][1] < it[0]){  // if the vector merge is empty or the last element of the vector merge is less than the first element of the vector it
                merge.Add(it);  // push the vector it to the vector merge
            }
            else{  // else
                merge[merge.Count - 1][1] = Math.Max(merge[merge.Count - 1][1], it[1]);  // update the last element of the vector merge
            }
        }
        return merge.ToArray();  // return the vector merge
    }
}



JavaScript:

// Time Complexity : O(nlogn) where n is the size of the vector intervals and space complexity is O(1)

var merge = function(intervals) {
    intervals.sort((a, b) => a[0] - b[0]);  // sort the vector intervals
    let merge = [];  // vector to store the result
    for(let it of intervals){  // iterate through the vector intervals
        if(merge.length == 0 || merge[merge.length - 1][1] < it[0]){  // if the vector merge is empty or the last element of the vector merge is less than the first element of the vector it
            merge.push(it);  // push the vector it to the vector merge
        }
        else{  // else
            merge[merge.length - 1][1] = Math.max(merge[merge.length - 1][1], it[1]);  // update the last element of the vector merge
        }
    }
    return merge;  // return the vector merge
};


Swift:

// Time Complexity : O(nlogn) where n is the size of the vector intervals and space complexity is O(1)

class Solution {
    func merge(_ intervals: [[Int]]) -> [[Int]] {
        var intervals = intervals.sorted(by: { $0[0] < $1[0] })  // sort the vector intervals
        var merge = [[Int]]()  // vector to store the result
        for it in intervals{  // iterate through the vector intervals
            if merge.isEmpty || merge[merge.count - 1][1] < it[0]{  // if the vector merge is empty or the last element of the vector merge is less than the first element of the vector it
                merge.append(it)  // push the vector it to the vector merge
            }
            else{  // else
                merge[merge.count - 1][1] = max(merge[merge.count - 1][1], it[1])  // update the last element of the vector merge
            }
        }
        return merge  // return the vector merge
    }
}

